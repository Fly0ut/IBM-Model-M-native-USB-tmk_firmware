   1               		.file	"suspend.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.suspend_idle,"ax",@progbits
  12               	.global	suspend_idle
  14               	suspend_idle:
  15               	.LVL0:
  16               	.LFB6:
  17               		.file 1 "./tmk_keyboard/tmk_core/common/avr/suspend.c"
   1:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include <stdbool.h>
   2:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include <avr/sleep.h>
   3:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include <avr/wdt.h>
   4:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include <avr/interrupt.h>
   5:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include "matrix.h"
   6:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include "action.h"
   7:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include "backlight.h"
   8:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include "suspend_avr.h"
   9:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include "suspend.h"
  10:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include "timer.h"
  11:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  12:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #include "lufa.h"
  13:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #endif
  14:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  15:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  16:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #define wdt_intr_enable(value)   \
  17:./tmk_keyboard/tmk_core/common/avr/suspend.c **** __asm__ __volatile__ (  \
  18:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     "in __tmp_reg__,__SREG__" "\n\t"    \
  19:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     "cli" "\n\t"    \
  20:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     "wdr" "\n\t"    \
  21:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     "sts %0,%1" "\n\t"  \
  22:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     "out __SREG__,__tmp_reg__" "\n\t"   \
  23:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     "sts %0,%2" "\n\t" \
  24:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     : /* no outputs */  \
  25:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     : "M" (_SFR_MEM_ADDR(_WD_CONTROL_REG)), \
  26:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     "r" (_BV(_WD_CHANGE_BIT) | _BV(WDE)), \
  27:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) | \
  28:./tmk_keyboard/tmk_core/common/avr/suspend.c ****         _BV(WDIE) | (value & 0x07)) ) \
  29:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     : "r0"  \
  30:./tmk_keyboard/tmk_core/common/avr/suspend.c **** )
  31:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  32:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  33:./tmk_keyboard/tmk_core/common/avr/suspend.c **** void suspend_idle(uint8_t time)
  34:./tmk_keyboard/tmk_core/common/avr/suspend.c **** {
  18               		.loc 1 34 1 view -0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  35:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     cli();
  24               		.loc 1 35 5 view .LVU1
  25               	/* #APP */
  26               	 ;  35 "./tmk_keyboard/tmk_core/common/avr/suspend.c" 1
  27 0000 F894      		cli
  28               	 ;  0 "" 2
  36:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_IDLE);
  29               		.loc 1 36 5 view .LVU2
  30               		.loc 1 36 5 view .LVU3
  31               	/* #NOAPP */
  32 0002 83B7      		in r24,0x33
  33               	.LVL1:
  34               		.loc 1 36 5 is_stmt 0 view .LVU4
  35 0004 817F      		andi r24,lo8(-15)
  36 0006 83BF      		out 0x33,r24
  37               		.loc 1 36 5 is_stmt 1 view .LVU5
  37:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_enable();
  38               		.loc 1 37 5 view .LVU6
  39               		.loc 1 37 5 view .LVU7
  40 0008 83B7      		in r24,0x33
  41 000a 8160      		ori r24,lo8(1)
  42 000c 83BF      		out 0x33,r24
  43               		.loc 1 37 5 view .LVU8
  38:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sei();
  44               		.loc 1 38 5 view .LVU9
  45               	/* #APP */
  46               	 ;  38 "./tmk_keyboard/tmk_core/common/avr/suspend.c" 1
  47 000e 7894      		sei
  48               	 ;  0 "" 2
  39:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_cpu();
  49               		.loc 1 39 5 view .LVU10
  50               		.loc 1 39 5 view .LVU11
  51               	 ;  39 "./tmk_keyboard/tmk_core/common/avr/suspend.c" 1
  52 0010 8895      		sleep
  53               		
  54               	 ;  0 "" 2
  55               		.loc 1 39 5 view .LVU12
  40:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_disable();
  56               		.loc 1 40 5 view .LVU13
  57               		.loc 1 40 5 view .LVU14
  58               	/* #NOAPP */
  59 0012 83B7      		in r24,0x33
  60 0014 8E7F      		andi r24,lo8(-2)
  61 0016 83BF      		out 0x33,r24
  62               		.loc 1 40 5 view .LVU15
  63               	/* epilogue start */
  41:./tmk_keyboard/tmk_core/common/avr/suspend.c **** }
  64               		.loc 1 41 1 is_stmt 0 view .LVU16
  65 0018 0895      		ret
  66               		.cfi_endproc
  67               	.LFE6:
  69               		.section	.text.suspend_power_down,"ax",@progbits
  70               	.global	suspend_power_down
  72               	suspend_power_down:
  73               	.LFB8:
  42:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  43:./tmk_keyboard/tmk_core/common/avr/suspend.c **** /* Power down MCU with watchdog timer
  44:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  * wdto: watchdog timer timeout defined in <avr/wdt.h>
  45:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_15MS
  46:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_30MS
  47:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_60MS
  48:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_120MS
  49:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_250MS
  50:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_500MS
  51:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_1S
  52:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_2S
  53:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_4S
  54:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  *          WDTO_8S
  55:./tmk_keyboard/tmk_core/common/avr/suspend.c ****  */
  56:./tmk_keyboard/tmk_core/common/avr/suspend.c **** static uint8_t wdt_timeout = 0;
  57:./tmk_keyboard/tmk_core/common/avr/suspend.c **** static void power_down(uint8_t wdto)
  58:./tmk_keyboard/tmk_core/common/avr/suspend.c **** {
  59:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #ifdef PROTOCOL_LUFA
  60:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     if (USB_DeviceState == DEVICE_STATE_Configured) return;
  61:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #endif
  62:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     wdt_timeout = wdto;
  63:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  64:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // Watchdog Interrupt Mode
  65:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     wdt_intr_enable(wdto);
  66:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  67:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // TODO: more power saving
  68:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // See PicoPower application note
  69:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // - I/O port input with pullup
  70:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // - prescale clock
  71:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // - BOD disable
  72:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // - Power Reduction Register PRR
  73:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  74:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_enable();
  75:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sei();
  76:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_cpu();
  77:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_disable();
  78:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  79:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // Disable watchdog after sleep
  80:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     wdt_disable();
  81:./tmk_keyboard/tmk_core/common/avr/suspend.c **** }
  82:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  83:./tmk_keyboard/tmk_core/common/avr/suspend.c **** void suspend_power_down(void)
  84:./tmk_keyboard/tmk_core/common/avr/suspend.c **** {
  74               		.loc 1 84 1 is_stmt 1 view -0
  75               		.cfi_startproc
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
  85:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     power_down(WDTO_15MS);
  80               		.loc 1 85 5 view .LVU18
  81               	.LBB11:
  82               	.LBI11:
  57:./tmk_keyboard/tmk_core/common/avr/suspend.c **** {
  83               		.loc 1 57 13 view .LVU19
  84               	.LVL2:
  85               	.LBB12:
  62:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  86               		.loc 1 62 5 view .LVU20
  62:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  87               		.loc 1 62 17 is_stmt 0 view .LVU21
  88 0000 1092 0000 		sts wdt_timeout,__zero_reg__
  65:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  89               		.loc 1 65 5 is_stmt 1 view .LVU22
  90 0004 88E1      		ldi r24,lo8(24)
  91 0006 90E0      		ldi r25,0
  92 0008 20E4      		ldi r18,lo8(64)
  93               	/* #APP */
  94               	 ;  65 "./tmk_keyboard/tmk_core/common/avr/suspend.c" 1
  95 000a 0FB6      		in __tmp_reg__,__SREG__
  96 000c F894      		cli
  97 000e A895      		wdr
  98 0010 8093 6000 		sts 96,r24
  99 0014 0FBE      		out __SREG__,__tmp_reg__
 100 0016 2093 6000 		sts 96,r18
 101               		
 102               	 ;  0 "" 2
  73:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_enable();
 103               		.loc 1 73 5 view .LVU23
  73:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_enable();
 104               		.loc 1 73 5 view .LVU24
 105               	/* #NOAPP */
 106 001a 83B7      		in r24,0x33
 107 001c 817F      		andi r24,lo8(-15)
 108 001e 8460      		ori r24,lo8(4)
 109 0020 83BF      		out 0x33,r24
  73:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_enable();
 110               		.loc 1 73 5 view .LVU25
  74:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sei();
 111               		.loc 1 74 5 view .LVU26
  74:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sei();
 112               		.loc 1 74 5 view .LVU27
 113 0022 83B7      		in r24,0x33
 114 0024 8160      		ori r24,lo8(1)
 115 0026 83BF      		out 0x33,r24
  74:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sei();
 116               		.loc 1 74 5 view .LVU28
  75:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_cpu();
 117               		.loc 1 75 5 view .LVU29
 118               	/* #APP */
 119               	 ;  75 "./tmk_keyboard/tmk_core/common/avr/suspend.c" 1
 120 0028 7894      		sei
 121               	 ;  0 "" 2
  76:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_disable();
 122               		.loc 1 76 5 view .LVU30
  76:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_disable();
 123               		.loc 1 76 5 view .LVU31
 124               	 ;  76 "./tmk_keyboard/tmk_core/common/avr/suspend.c" 1
 125 002a 8895      		sleep
 126               		
 127               	 ;  0 "" 2
  76:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     sleep_disable();
 128               		.loc 1 76 5 view .LVU32
  77:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
 129               		.loc 1 77 5 view .LVU33
  77:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
 130               		.loc 1 77 5 view .LVU34
 131               	/* #NOAPP */
 132 002c 83B7      		in r24,0x33
 133 002e 8E7F      		andi r24,lo8(-2)
 134 0030 83BF      		out 0x33,r24
  77:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
 135               		.loc 1 77 5 view .LVU35
  80:./tmk_keyboard/tmk_core/common/avr/suspend.c **** }
 136               		.loc 1 80 5 view .LVU36
 137               	.LBB13:
 138               	.LBI13:
 139               		.file 2 "/usr/avr/include/avr/wdt.h"
   1:/usr/avr/include/avr/wdt.h **** /* Copyright (c) 2002, 2004 Marek Michalkiewicz
   2:/usr/avr/include/avr/wdt.h ****    Copyright (c) 2005, 2006, 2007 Eric B. Weddington
   3:/usr/avr/include/avr/wdt.h ****    All rights reserved.
   4:/usr/avr/include/avr/wdt.h **** 
   5:/usr/avr/include/avr/wdt.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/avr/wdt.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/avr/wdt.h **** 
   8:/usr/avr/include/avr/wdt.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/avr/wdt.h **** 
  11:/usr/avr/include/avr/wdt.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/avr/wdt.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/avr/wdt.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/avr/wdt.h ****      distribution.
  15:/usr/avr/include/avr/wdt.h **** 
  16:/usr/avr/include/avr/wdt.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/avr/wdt.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/avr/wdt.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/avr/wdt.h **** 
  20:/usr/avr/include/avr/wdt.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/avr/wdt.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/avr/wdt.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/avr/wdt.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/avr/wdt.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/avr/wdt.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/avr/wdt.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/avr/wdt.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/avr/wdt.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/avr/wdt.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/avr/wdt.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/avr/wdt.h **** 
  32:/usr/avr/include/avr/wdt.h **** /* $Id: wdt.h 2503 2016-02-07 22:59:47Z joerg_wunsch $ */
  33:/usr/avr/include/avr/wdt.h **** 
  34:/usr/avr/include/avr/wdt.h **** /*
  35:/usr/avr/include/avr/wdt.h ****    avr/wdt.h - macros for AVR watchdog timer
  36:/usr/avr/include/avr/wdt.h ****  */
  37:/usr/avr/include/avr/wdt.h **** 
  38:/usr/avr/include/avr/wdt.h **** #ifndef _AVR_WDT_H_
  39:/usr/avr/include/avr/wdt.h **** #define _AVR_WDT_H_
  40:/usr/avr/include/avr/wdt.h **** 
  41:/usr/avr/include/avr/wdt.h **** #include <avr/io.h>
  42:/usr/avr/include/avr/wdt.h **** #include <stdint.h>
  43:/usr/avr/include/avr/wdt.h **** 
  44:/usr/avr/include/avr/wdt.h **** /** \file */
  45:/usr/avr/include/avr/wdt.h **** /** \defgroup avr_watchdog <avr/wdt.h>: Watchdog timer handling
  46:/usr/avr/include/avr/wdt.h ****     \code #include <avr/wdt.h> \endcode
  47:/usr/avr/include/avr/wdt.h **** 
  48:/usr/avr/include/avr/wdt.h ****     This header file declares the interface to some inline macros
  49:/usr/avr/include/avr/wdt.h ****     handling the watchdog timer present in many AVR devices.  In order
  50:/usr/avr/include/avr/wdt.h ****     to prevent the watchdog timer configuration from being
  51:/usr/avr/include/avr/wdt.h ****     accidentally altered by a crashing application, a special timed
  52:/usr/avr/include/avr/wdt.h ****     sequence is required in order to change it.  The macros within
  53:/usr/avr/include/avr/wdt.h ****     this header file handle the required sequence automatically
  54:/usr/avr/include/avr/wdt.h ****     before changing any value.  Interrupts will be disabled during
  55:/usr/avr/include/avr/wdt.h ****     the manipulation.
  56:/usr/avr/include/avr/wdt.h **** 
  57:/usr/avr/include/avr/wdt.h ****     \note Depending on the fuse configuration of the particular
  58:/usr/avr/include/avr/wdt.h ****     device, further restrictions might apply, in particular it might
  59:/usr/avr/include/avr/wdt.h ****     be disallowed to turn off the watchdog timer.
  60:/usr/avr/include/avr/wdt.h **** 
  61:/usr/avr/include/avr/wdt.h ****     Note that for newer devices (ATmega88 and newer, effectively any
  62:/usr/avr/include/avr/wdt.h ****     AVR that has the option to also generate interrupts), the watchdog
  63:/usr/avr/include/avr/wdt.h ****     timer remains active even after a system reset (except a power-on
  64:/usr/avr/include/avr/wdt.h ****     condition), using the fastest prescaler value (approximately 15
  65:/usr/avr/include/avr/wdt.h ****     ms).  It is therefore required to turn off the watchdog early
  66:/usr/avr/include/avr/wdt.h ****     during program startup, the datasheet recommends a sequence like
  67:/usr/avr/include/avr/wdt.h ****     the following:
  68:/usr/avr/include/avr/wdt.h **** 
  69:/usr/avr/include/avr/wdt.h ****     \code
  70:/usr/avr/include/avr/wdt.h ****     #include <stdint.h>
  71:/usr/avr/include/avr/wdt.h ****     #include <avr/wdt.h>
  72:/usr/avr/include/avr/wdt.h **** 
  73:/usr/avr/include/avr/wdt.h ****     uint8_t mcusr_mirror __attribute__ ((section (".noinit")));
  74:/usr/avr/include/avr/wdt.h **** 
  75:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void) \
  76:/usr/avr/include/avr/wdt.h ****       __attribute__((naked)) \
  77:/usr/avr/include/avr/wdt.h ****       __attribute__((section(".init3")));
  78:/usr/avr/include/avr/wdt.h ****     void get_mcusr(void)
  79:/usr/avr/include/avr/wdt.h ****     {
  80:/usr/avr/include/avr/wdt.h ****       mcusr_mirror = MCUSR;
  81:/usr/avr/include/avr/wdt.h ****       MCUSR = 0;
  82:/usr/avr/include/avr/wdt.h ****       wdt_disable();
  83:/usr/avr/include/avr/wdt.h ****     }
  84:/usr/avr/include/avr/wdt.h ****     \endcode
  85:/usr/avr/include/avr/wdt.h **** 
  86:/usr/avr/include/avr/wdt.h ****     Saving the value of MCUSR in \c mcusr_mirror is only needed if the
  87:/usr/avr/include/avr/wdt.h ****     application later wants to examine the reset source, but in particular, 
  88:/usr/avr/include/avr/wdt.h ****     clearing the watchdog reset flag before disabling the
  89:/usr/avr/include/avr/wdt.h ****     watchdog is required, according to the datasheet.
  90:/usr/avr/include/avr/wdt.h **** */
  91:/usr/avr/include/avr/wdt.h **** 
  92:/usr/avr/include/avr/wdt.h **** /**
  93:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
  94:/usr/avr/include/avr/wdt.h ****    Reset the watchdog timer.  When the watchdog timer is enabled,
  95:/usr/avr/include/avr/wdt.h ****    a call to this instruction is required before the timer expires,
  96:/usr/avr/include/avr/wdt.h ****    otherwise a watchdog-initiated device reset will occur. 
  97:/usr/avr/include/avr/wdt.h **** */
  98:/usr/avr/include/avr/wdt.h **** 
  99:/usr/avr/include/avr/wdt.h **** #define wdt_reset() __asm__ __volatile__ ("wdr")
 100:/usr/avr/include/avr/wdt.h **** 
 101:/usr/avr/include/avr/wdt.h **** #ifndef __DOXYGEN__
 102:/usr/avr/include/avr/wdt.h **** 
 103:/usr/avr/include/avr/wdt.h **** #if defined(WDP3)
 104:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       _BV(WDP3)
 105:/usr/avr/include/avr/wdt.h **** #else
 106:/usr/avr/include/avr/wdt.h **** # define _WD_PS3_MASK       0x00
 107:/usr/avr/include/avr/wdt.h **** #endif
 108:/usr/avr/include/avr/wdt.h **** 
 109:/usr/avr/include/avr/wdt.h **** #if defined(WDTCSR)
 110:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCSR
 111:/usr/avr/include/avr/wdt.h **** #elif defined(WDTCR)
 112:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDTCR
 113:/usr/avr/include/avr/wdt.h **** #else
 114:/usr/avr/include/avr/wdt.h **** #  define _WD_CONTROL_REG     WDT
 115:/usr/avr/include/avr/wdt.h **** #endif
 116:/usr/avr/include/avr/wdt.h **** 
 117:/usr/avr/include/avr/wdt.h **** #if defined(WDTOE)
 118:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDTOE
 119:/usr/avr/include/avr/wdt.h **** #else
 120:/usr/avr/include/avr/wdt.h **** #define _WD_CHANGE_BIT      WDCE
 121:/usr/avr/include/avr/wdt.h **** #endif
 122:/usr/avr/include/avr/wdt.h **** 
 123:/usr/avr/include/avr/wdt.h **** #endif	/* !__DOXYGEN__ */
 124:/usr/avr/include/avr/wdt.h **** 
 125:/usr/avr/include/avr/wdt.h **** 
 126:/usr/avr/include/avr/wdt.h **** /**
 127:/usr/avr/include/avr/wdt.h ****    \ingroup avr_watchdog
 128:/usr/avr/include/avr/wdt.h ****    Enable the watchdog timer, configuring it for expiry after
 129:/usr/avr/include/avr/wdt.h ****    \c timeout (which is a combination of the \c WDP0 through
 130:/usr/avr/include/avr/wdt.h ****    \c WDP2 bits to write into the \c WDTCR register; For those devices 
 131:/usr/avr/include/avr/wdt.h ****    that have a \c WDTCSR register, it uses the combination of the \c WDP0 
 132:/usr/avr/include/avr/wdt.h ****    through \c WDP3 bits).
 133:/usr/avr/include/avr/wdt.h **** 
 134:/usr/avr/include/avr/wdt.h ****    See also the symbolic constants \c WDTO_15MS et al.
 135:/usr/avr/include/avr/wdt.h **** */
 136:/usr/avr/include/avr/wdt.h **** 
 137:/usr/avr/include/avr/wdt.h **** 
 138:/usr/avr/include/avr/wdt.h **** #if defined(__AVR_XMEGA__)
 139:/usr/avr/include/avr/wdt.h **** 
 140:/usr/avr/include/avr/wdt.h **** /*
 141:/usr/avr/include/avr/wdt.h ****    wdt_enable(timeout) for xmega devices
 142:/usr/avr/include/avr/wdt.h **** ** write signature (CCP_IOREG_gc) that enables change of protected I/O
 143:/usr/avr/include/avr/wdt.h ****    registers to the CCP register
 144:/usr/avr/include/avr/wdt.h **** ** At the same time,
 145:/usr/avr/include/avr/wdt.h ****    1) set WDT change enable (WDT_CEN_bm)
 146:/usr/avr/include/avr/wdt.h ****    2) enable WDT (WDT_ENABLE_bm)
 147:/usr/avr/include/avr/wdt.h ****    3) set timeout (timeout)
 148:/usr/avr/include/avr/wdt.h **** ** Synchronization starts when ENABLE bit of WDT is set. So, wait till it
 149:/usr/avr/include/avr/wdt.h ****    finishes (SYNCBUSY of STATUS register is automatically cleared after the
 150:/usr/avr/include/avr/wdt.h ****    sync is finished).
 151:/usr/avr/include/avr/wdt.h **** */
 152:/usr/avr/include/avr/wdt.h **** #define wdt_enable(timeout) \
 153:/usr/avr/include/avr/wdt.h **** do { \
 154:/usr/avr/include/avr/wdt.h **** uint8_t temp; \
 155:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (         \
 156:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"              "\n\t" \
 157:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"            "\n\t" \
 158:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]"     "\n\t" \
 159:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[wdt_enable_timeout]" "\n\t" \
 160:/usr/avr/include/avr/wdt.h ****     "1:lds %[tmp], %[wdt_status_reg]"       "\n\t" \
 161:/usr/avr/include/avr/wdt.h ****     "sbrc %[tmp], %[wdt_syncbusy_bit]"      "\n\t" \
 162:/usr/avr/include/avr/wdt.h ****     "rjmp 1b"                               "\n\t" \
 163:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"             "\n\t" \
 164:/usr/avr/include/avr/wdt.h ****     : [tmp]                "=r" (temp) \
 165:/usr/avr/include/avr/wdt.h ****     : [rampd]              "I" (_SFR_IO_ADDR(RAMPD)),      \
 166:/usr/avr/include/avr/wdt.h ****       [ccp_reg]            "I" (_SFR_IO_ADDR(CCP)),        \
 167:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]     "r" ((uint8_t)CCP_IOREG_gc),     \
 168:/usr/avr/include/avr/wdt.h ****       [wdt_reg]            "n" (_SFR_MEM_ADDR(WDT_CTRL)),   \
 169:/usr/avr/include/avr/wdt.h ****       [wdt_enable_timeout] "r" ((uint8_t)(WDT_CEN_bm | WDT_ENABLE_bm | timeout)), \
 170:/usr/avr/include/avr/wdt.h ****       [wdt_status_reg]     "n" (_SFR_MEM_ADDR(WDT_STATUS)), \
 171:/usr/avr/include/avr/wdt.h ****       [wdt_syncbusy_bit]   "I" (WDT_SYNCBUSY_bm)            \
 172:/usr/avr/include/avr/wdt.h ****     : "r0" \
 173:/usr/avr/include/avr/wdt.h **** ); \
 174:/usr/avr/include/avr/wdt.h **** } while(0)
 175:/usr/avr/include/avr/wdt.h **** 
 176:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 177:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ (  \
 178:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__, %[rampd]"          "\n\t" \
 179:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __zero_reg__"        "\n\t" \
 180:/usr/avr/include/avr/wdt.h ****     "out %[ccp_reg], %[ioreg_cen_mask]" "\n\t" \
 181:/usr/avr/include/avr/wdt.h ****     "sts %[wdt_reg], %[disable_mask]"   "\n\t" \
 182:/usr/avr/include/avr/wdt.h ****     "out %[rampd], __tmp_reg__"         "\n\t" \
 183:/usr/avr/include/avr/wdt.h ****     : \
 184:/usr/avr/include/avr/wdt.h ****     : [rampd]             "I" (_SFR_IO_ADDR(RAMPD)),    \
 185:/usr/avr/include/avr/wdt.h ****       [ccp_reg]           "I" (_SFR_IO_ADDR(CCP)),      \
 186:/usr/avr/include/avr/wdt.h ****       [ioreg_cen_mask]    "r" ((uint8_t)CCP_IOREG_gc),   \
 187:/usr/avr/include/avr/wdt.h ****       [wdt_reg]           "n" (_SFR_MEM_ADDR(WDT_CTRL)), \
 188:/usr/avr/include/avr/wdt.h ****       [disable_mask]      "r" ((uint8_t)((~WDT_ENABLE_bm) | WDT_CEN_bm)) \
 189:/usr/avr/include/avr/wdt.h ****     : "r0" \
 190:/usr/avr/include/avr/wdt.h **** );
 191:/usr/avr/include/avr/wdt.h **** 
 192:/usr/avr/include/avr/wdt.h **** #elif defined(__AVR_TINY__)
 193:/usr/avr/include/avr/wdt.h **** 
 194:/usr/avr/include/avr/wdt.h **** #define wdt_enable(value) \
 195:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 196:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 197:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 198:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 199:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 200:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[WDVALUE]" "\n\t"  \
 201:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t"  \
 202:/usr/avr/include/avr/wdt.h ****     : /* no outputs */  \
 203:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),  \
 204:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 205:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 206:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00) \
 207:/usr/avr/include/avr/wdt.h ****       | _BV(WDE) | (value & 0x07) )) \
 208:/usr/avr/include/avr/wdt.h ****     : "r16" \
 209:/usr/avr/include/avr/wdt.h **** )
 210:/usr/avr/include/avr/wdt.h **** 
 211:/usr/avr/include/avr/wdt.h **** #define wdt_disable() \
 212:/usr/avr/include/avr/wdt.h **** do { \
 213:/usr/avr/include/avr/wdt.h **** uint8_t temp_wd; \
 214:/usr/avr/include/avr/wdt.h **** __asm__ __volatile__ ( \
 215:/usr/avr/include/avr/wdt.h ****     "in __tmp_reg__,__SREG__" "\n\t"  \
 216:/usr/avr/include/avr/wdt.h ****     "cli" "\n\t"  \
 217:/usr/avr/include/avr/wdt.h ****     "wdr" "\n\t"  \
 218:/usr/avr/include/avr/wdt.h ****     "out %[CCPADDRESS],%[SIGNATURE]" "\n\t"  \
 219:/usr/avr/include/avr/wdt.h ****     "in  %[TEMP_WD],%[WDTREG]" "\n\t" \
 220:/usr/avr/include/avr/wdt.h ****     "cbr %[TEMP_WD],%[WDVALUE]" "\n\t" \
 221:/usr/avr/include/avr/wdt.h ****     "out %[WDTREG],%[TEMP_WD]" "\n\t" \
 222:/usr/avr/include/avr/wdt.h ****     "out __SREG__,__tmp_reg__" "\n\t" \
 223:/usr/avr/include/avr/wdt.h ****     : /*no output */ \
 224:/usr/avr/include/avr/wdt.h ****     : [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)), \
 225:/usr/avr/include/avr/wdt.h ****       [SIGNATURE] "r" ((uint8_t)0xD8), \
 226:/usr/avr/include/avr/wdt.h ****       [WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)), \
 227:/usr/avr/include/avr/wdt.h ****       [TEMP_WD] "d" (temp_wd), \
 228:/usr/avr/include/avr/wdt.h ****       [WDVALUE] "n" (1 << WDE) \
 229:/usr/avr/include/avr/wdt.h ****     : "r16" \
 230:/usr/avr/include/avr/wdt.h **** ); \
 231:/usr/avr/include/avr/wdt.h **** }while(0)
 232:/usr/avr/include/avr/wdt.h **** 
 233:/usr/avr/include/avr/wdt.h **** #elif defined(CCP)
 234:/usr/avr/include/avr/wdt.h **** 
 235:/usr/avr/include/avr/wdt.h **** static __inline__
 236:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 237:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 238:/usr/avr/include/avr/wdt.h **** {
 239:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 240:/usr/avr/include/avr/wdt.h **** 	{
 241:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 242:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 243:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 244:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 245:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 246:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 247:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 248:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 249:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 250:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 251:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 252:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 253:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 254:/usr/avr/include/avr/wdt.h **** 			: "r0"
 255:/usr/avr/include/avr/wdt.h **** 			);
 256:/usr/avr/include/avr/wdt.h **** 	}
 257:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P (_WD_CONTROL_REG))
 258:/usr/avr/include/avr/wdt.h **** 	{
 259:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 260:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 261:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 262:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 263:/usr/avr/include/avr/wdt.h **** 			"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 264:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 265:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 266:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 267:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 268:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 269:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 270:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 271:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 272:/usr/avr/include/avr/wdt.h **** 			: "r0"
 273:/usr/avr/include/avr/wdt.h **** 			);
 274:/usr/avr/include/avr/wdt.h **** 	}
 275:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P (_WD_CONTROL_REG))
 276:/usr/avr/include/avr/wdt.h **** 	{
 277:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 278:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 279:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 280:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 281:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 282:/usr/avr/include/avr/wdt.h **** 			"sts %[WDTREG],%[WDVALUE]" "\n\t"
 283:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 284:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 285:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 286:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 287:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 288:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 289:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 290:/usr/avr/include/avr/wdt.h **** 			: "r0"
 291:/usr/avr/include/avr/wdt.h **** 			);
 292:/usr/avr/include/avr/wdt.h **** 	}
 293:/usr/avr/include/avr/wdt.h **** 	else
 294:/usr/avr/include/avr/wdt.h ****  	{
 295:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 296:/usr/avr/include/avr/wdt.h **** 			"in __tmp_reg__,__SREG__" "\n\t"
 297:/usr/avr/include/avr/wdt.h **** 			"cli" "\n\t"
 298:/usr/avr/include/avr/wdt.h **** 			"wdr" "\n\t"
 299:/usr/avr/include/avr/wdt.h **** 			"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 300:/usr/avr/include/avr/wdt.h **** 			"out %[WDTREG],%[WDVALUE]" "\n\t"
 301:/usr/avr/include/avr/wdt.h **** 			"out __SREG__,__tmp_reg__" "\n\t"
 302:/usr/avr/include/avr/wdt.h **** 			: /* no outputs */
 303:/usr/avr/include/avr/wdt.h **** 			: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 304:/usr/avr/include/avr/wdt.h **** 			[SIGNATURE] "r" ((uint8_t)0xD8),
 305:/usr/avr/include/avr/wdt.h **** 			[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 306:/usr/avr/include/avr/wdt.h **** 			[WDVALUE] "r" ((uint8_t)((value & 0x08 ? _WD_PS3_MASK : 0x00)
 307:/usr/avr/include/avr/wdt.h **** 				| _BV(WDE) | (value & 0x07) ))
 308:/usr/avr/include/avr/wdt.h **** 			: "r0"
 309:/usr/avr/include/avr/wdt.h **** 			);
 310:/usr/avr/include/avr/wdt.h **** 	}
 311:/usr/avr/include/avr/wdt.h **** }
 312:/usr/avr/include/avr/wdt.h **** 
 313:/usr/avr/include/avr/wdt.h **** static __inline__
 314:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 315:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 316:/usr/avr/include/avr/wdt.h **** {
 317:/usr/avr/include/avr/wdt.h **** 	if (!_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 318:/usr/avr/include/avr/wdt.h **** 	{
 319:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 320:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 321:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 322:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 323:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 324:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 325:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 326:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 327:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 328:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 329:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 330:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 331:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 332:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 333:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 334:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 335:/usr/avr/include/avr/wdt.h **** 				: "r0"
 336:/usr/avr/include/avr/wdt.h **** 				);
 337:/usr/avr/include/avr/wdt.h **** 	}
 338:/usr/avr/include/avr/wdt.h **** 	else if (!_SFR_IO_REG_P (CCP) && _SFR_IO_REG_P(_WD_CONTROL_REG))
 339:/usr/avr/include/avr/wdt.h **** 	{
 340:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 341:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 342:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 343:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 344:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 345:/usr/avr/include/avr/wdt.h **** 				"sts %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 346:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 347:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 348:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 349:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 350:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 351:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "n" (_SFR_MEM_ADDR(CCP)),
 352:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 353:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 354:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 355:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 356:/usr/avr/include/avr/wdt.h **** 				: "r0"
 357:/usr/avr/include/avr/wdt.h **** 				);
 358:/usr/avr/include/avr/wdt.h **** 	}
 359:/usr/avr/include/avr/wdt.h **** 	else if (_SFR_IO_REG_P (CCP) && !_SFR_IO_REG_P(_WD_CONTROL_REG))
 360:/usr/avr/include/avr/wdt.h **** 	{
 361:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 362:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 363:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 364:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 365:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 366:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 367:/usr/avr/include/avr/wdt.h **** 				"lds %[TEMP_WD],%[WDTREG]" "\n\t"
 368:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 369:/usr/avr/include/avr/wdt.h **** 				"sts %[WDTREG],%[TEMP_WD]" "\n\t"
 370:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 371:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 372:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 373:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 374:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 375:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 376:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 377:/usr/avr/include/avr/wdt.h **** 				: "r0"
 378:/usr/avr/include/avr/wdt.h **** 				);
 379:/usr/avr/include/avr/wdt.h **** 	}
 380:/usr/avr/include/avr/wdt.h **** 	else
 381:/usr/avr/include/avr/wdt.h **** 	{
 382:/usr/avr/include/avr/wdt.h ****         uint8_t temp_wd;
 383:/usr/avr/include/avr/wdt.h ****         __asm__ __volatile__ (
 384:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 385:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 386:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 387:/usr/avr/include/avr/wdt.h **** 				"out %[CCPADDRESS],%[SIGNATURE]" "\n\t"
 388:/usr/avr/include/avr/wdt.h **** 				"in %[TEMP_WD],%[WDTREG]" "\n\t"
 389:/usr/avr/include/avr/wdt.h **** 				"cbr %[TEMP_WD],%[WDVALUE]" "\n\t"
 390:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMP_WD]" "\n\t"
 391:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 392:/usr/avr/include/avr/wdt.h **** 				: /*no output */
 393:/usr/avr/include/avr/wdt.h **** 				: [CCPADDRESS] "I" (_SFR_IO_ADDR(CCP)),
 394:/usr/avr/include/avr/wdt.h **** 				[SIGNATURE] "r" ((uint8_t)0xD8),
 395:/usr/avr/include/avr/wdt.h **** 				[WDTREG] "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 396:/usr/avr/include/avr/wdt.h **** 				[TEMP_WD] "d" (temp_wd),
 397:/usr/avr/include/avr/wdt.h **** 				[WDVALUE] "n" (1 << WDE)
 398:/usr/avr/include/avr/wdt.h **** 				: "r0"
 399:/usr/avr/include/avr/wdt.h **** 				);
 400:/usr/avr/include/avr/wdt.h **** 	}
 401:/usr/avr/include/avr/wdt.h **** }
 402:/usr/avr/include/avr/wdt.h **** 
 403:/usr/avr/include/avr/wdt.h **** #else
 404:/usr/avr/include/avr/wdt.h **** 
 405:/usr/avr/include/avr/wdt.h **** static __inline__
 406:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 407:/usr/avr/include/avr/wdt.h **** void wdt_enable (const uint8_t value)
 408:/usr/avr/include/avr/wdt.h **** {
 409:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 410:/usr/avr/include/avr/wdt.h **** 	{
 411:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 412:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 413:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 414:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 415:/usr/avr/include/avr/wdt.h **** 				"out %0, %1" "\n\t"
 416:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 417:/usr/avr/include/avr/wdt.h **** 				"out %0, %2" "\n \t"
 418:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 419:/usr/avr/include/avr/wdt.h **** 				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 420:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 421:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 422:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 423:/usr/avr/include/avr/wdt.h **** 				: "r0"
 424:/usr/avr/include/avr/wdt.h **** 		);
 425:/usr/avr/include/avr/wdt.h **** 	}
 426:/usr/avr/include/avr/wdt.h **** 	else
 427:/usr/avr/include/avr/wdt.h **** 	{
 428:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 429:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__" "\n\t"
 430:/usr/avr/include/avr/wdt.h **** 				"cli" "\n\t"
 431:/usr/avr/include/avr/wdt.h **** 				"wdr" "\n\t"
 432:/usr/avr/include/avr/wdt.h **** 				"sts %0, %1" "\n\t"
 433:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__" "\n\t"
 434:/usr/avr/include/avr/wdt.h **** 				"sts %0, %2" "\n \t"
 435:/usr/avr/include/avr/wdt.h **** 				: /* no outputs */
 436:/usr/avr/include/avr/wdt.h **** 				: "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
 437:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
 438:/usr/avr/include/avr/wdt.h **** 				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
 439:/usr/avr/include/avr/wdt.h **** 						_BV(WDE) | (value & 0x07)) )
 440:/usr/avr/include/avr/wdt.h **** 				: "r0"
 441:/usr/avr/include/avr/wdt.h **** 		);
 442:/usr/avr/include/avr/wdt.h **** 	}
 443:/usr/avr/include/avr/wdt.h **** }
 444:/usr/avr/include/avr/wdt.h **** 
 445:/usr/avr/include/avr/wdt.h **** static __inline__
 446:/usr/avr/include/avr/wdt.h **** __attribute__ ((__always_inline__))
 447:/usr/avr/include/avr/wdt.h **** void wdt_disable (void)
 140               		.loc 2 447 6 view .LVU37
 448:/usr/avr/include/avr/wdt.h **** {
 449:/usr/avr/include/avr/wdt.h **** 	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
 141               		.loc 2 449 2 view .LVU38
 142               	.LBB14:
 450:/usr/avr/include/avr/wdt.h **** 	{
 451:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 452:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 453:/usr/avr/include/avr/wdt.h **** 				"in __tmp_reg__,__SREG__"    "\n\t"
 454:/usr/avr/include/avr/wdt.h **** 				"cli"                        "\n\t"
 455:/usr/avr/include/avr/wdt.h **** 				"wdr"                        "\n\t"
 456:/usr/avr/include/avr/wdt.h **** 				"in  %[TEMPREG],%[WDTREG]"   "\n\t"
 457:/usr/avr/include/avr/wdt.h **** 				"ori %[TEMPREG],%[WDCE_WDE]" "\n\t"
 458:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],%[TEMPREG]"   "\n\t"
 459:/usr/avr/include/avr/wdt.h **** 				"out %[WDTREG],__zero_reg__" "\n\t"
 460:/usr/avr/include/avr/wdt.h **** 				"out __SREG__,__tmp_reg__"   "\n\t"
 461:/usr/avr/include/avr/wdt.h **** 				: [TEMPREG] "=d" (temp_reg)
 462:/usr/avr/include/avr/wdt.h **** 				: [WDTREG]  "I"  (_SFR_IO_ADDR(_WD_CONTROL_REG)),
 463:/usr/avr/include/avr/wdt.h **** 				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
 464:/usr/avr/include/avr/wdt.h **** 				: "r0"
 465:/usr/avr/include/avr/wdt.h **** 		);
 466:/usr/avr/include/avr/wdt.h **** 	}
 467:/usr/avr/include/avr/wdt.h **** 	else
 468:/usr/avr/include/avr/wdt.h **** 	{
 469:/usr/avr/include/avr/wdt.h ****         uint8_t register temp_reg;
 143               		.loc 2 469 9 view .LVU39
 470:/usr/avr/include/avr/wdt.h **** 		__asm__ __volatile__ (
 144               		.loc 2 470 3 view .LVU40
 145               	/* #APP */
 146               	 ;  470 "/usr/avr/include/avr/wdt.h" 1
 147 0032 0FB6      		in __tmp_reg__,__SREG__
 148 0034 F894      		cli
 149 0036 A895      		wdr
 150 0038 8091 6000 		lds r24,96
 151 003c 8861      		ori r24,24
 152 003e 8093 6000 		sts 96,r24
 153 0042 1092 6000 		sts 96,__zero_reg__
 154 0046 0FBE      		out __SREG__,__tmp_reg__
 155               		
 156               	 ;  0 "" 2
 157               	.LVL3:
 158               	/* #NOAPP */
 159               	/* epilogue start */
 160               		.loc 2 470 3 is_stmt 0 view .LVU41
 161               	.LBE14:
 162               	.LBE13:
 163               	.LBE12:
 164               	.LBE11:
  86:./tmk_keyboard/tmk_core/common/avr/suspend.c **** }
 165               		.loc 1 86 1 view .LVU42
 166 0048 0895      		ret
 167               		.cfi_endproc
 168               	.LFE8:
 170               		.section	.text.matrix_power_up,"ax",@progbits
 171               		.weak	matrix_power_up
 173               	matrix_power_up:
 174               	.LFB9:
  87:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
  88:./tmk_keyboard/tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_up(void) {}
 175               		.loc 1 88 51 is_stmt 1 view -0
 176               		.cfi_startproc
 177               	/* prologue: function */
 178               	/* frame size = 0 */
 179               	/* stack size = 0 */
 180               	.L__stack_usage = 0
 181               		.loc 1 88 52 view .LVU44
 182               	/* epilogue start */
 183 0000 0895      		ret
 184               		.cfi_endproc
 185               	.LFE9:
 187               		.set	matrix_power_up.localalias,matrix_power_up
 188               		.section	.text.matrix_power_down,"ax",@progbits
 189               		.weak	matrix_power_down
 191               	matrix_power_down:
 192               	.LFB15:
 193               		.cfi_startproc
 194               	/* prologue: function */
 195               	/* frame size = 0 */
 196               	/* stack size = 0 */
 197               	.L__stack_usage = 0
 198               	/* epilogue start */
 199 0000 0895      		ret
 200               		.cfi_endproc
 201               	.LFE15:
 203               		.section	.text.suspend_wakeup_condition,"ax",@progbits
 204               	.global	suspend_wakeup_condition
 206               	suspend_wakeup_condition:
 207               	.LFB11:
  89:./tmk_keyboard/tmk_core/common/avr/suspend.c **** __attribute__ ((weak)) void matrix_power_down(void) {}
  90:./tmk_keyboard/tmk_core/common/avr/suspend.c **** bool suspend_wakeup_condition(void)
  91:./tmk_keyboard/tmk_core/common/avr/suspend.c **** {
 208               		.loc 1 91 1 view -0
 209               		.cfi_startproc
 210 0000 CF93      		push r28
 211               	.LCFI0:
 212               		.cfi_def_cfa_offset 3
 213               		.cfi_offset 28, -2
 214 0002 DF93      		push r29
 215               	.LCFI1:
 216               		.cfi_def_cfa_offset 4
 217               		.cfi_offset 29, -3
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 2 */
 221               	.L__stack_usage = 2
  92:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     matrix_power_up();
 222               		.loc 1 92 5 view .LVU46
 223 0004 0E94 0000 		call matrix_power_up
 224               	.LVL4:
  93:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     matrix_scan();
 225               		.loc 1 93 5 view .LVU47
 226 0008 0E94 0000 		call matrix_scan
 227               	.LVL5:
  94:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     matrix_power_down();
 228               		.loc 1 94 5 view .LVU48
 229 000c 0E94 0000 		call matrix_power_down
 230               	.LVL6:
  95:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 231               		.loc 1 95 5 view .LVU49
 232               	.LBB15:
 233               		.loc 1 95 10 view .LVU50
 234               		.loc 1 95 27 view .LVU51
 235               	.LBE15:
  94:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     matrix_power_down();
 236               		.loc 1 94 5 is_stmt 0 view .LVU52
 237 0010 D0E0      		ldi r29,0
 238 0012 C0E0      		ldi r28,0
 239               	.LVL7:
 240               	.L7:
 241               	.LBB16:
  96:./tmk_keyboard/tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 242               		.loc 1 96 9 is_stmt 1 view .LVU53
 243               		.loc 1 96 13 is_stmt 0 view .LVU54
 244 0014 CE01      		movw r24,r28
 245 0016 0E94 0000 		call matrix_get_row
 246               	.LVL8:
 247               		.loc 1 96 12 view .LVU55
 248 001a 892B      		or r24,r25
 249 001c 01F4      		brne .L8
  95:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 250               		.loc 1 95 43 is_stmt 1 discriminator 2 view .LVU56
 251               	.LVL9:
  95:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 252               		.loc 1 95 27 discriminator 2 view .LVU57
 253 001e 2196      		adiw r28,1
 254               	.LVL10:
  95:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 255               		.loc 1 95 27 is_stmt 0 discriminator 2 view .LVU58
 256 0020 C031      		cpi r28,16
 257 0022 D105      		cpc r29,__zero_reg__
 258 0024 01F4      		brne .L7
 259               	.LBE16:
  97:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     }
  98:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     return false;
 260               		.loc 1 98 12 view .LVU59
 261 0026 80E0      		ldi r24,0
 262               	.LVL11:
 263               	.L5:
 264               	/* epilogue start */
  99:./tmk_keyboard/tmk_core/common/avr/suspend.c **** }
 265               		.loc 1 99 1 view .LVU60
 266 0028 DF91      		pop r29
 267 002a CF91      		pop r28
 268 002c 0895      		ret
 269               	.LVL12:
 270               	.L8:
 271               	.LBB17:
  96:./tmk_keyboard/tmk_core/common/avr/suspend.c ****         if (matrix_get_row(r)) return true;
 272               		.loc 1 96 39 view .LVU61
 273 002e 81E0      		ldi r24,lo8(1)
 274 0030 00C0      		rjmp .L5
 275               	.LBE17:
 276               		.cfi_endproc
 277               	.LFE11:
 279               		.section	.text.suspend_wakeup_init,"ax",@progbits
 280               	.global	suspend_wakeup_init
 282               	suspend_wakeup_init:
 283               	.LFB12:
 100:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
 101:./tmk_keyboard/tmk_core/common/avr/suspend.c **** // run immediately after wakeup
 102:./tmk_keyboard/tmk_core/common/avr/suspend.c **** void suspend_wakeup_init(void)
 103:./tmk_keyboard/tmk_core/common/avr/suspend.c **** {
 284               		.loc 1 103 1 is_stmt 1 view -0
 285               		.cfi_startproc
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 0 */
 289               	.L__stack_usage = 0
 104:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // clear keyboard state
 105:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     clear_keyboard();
 290               		.loc 1 105 5 view .LVU63
 291 0000 0C94 0000 		jmp clear_keyboard
 292               	.LVL13:
 293               		.cfi_endproc
 294               	.LFE12:
 296               		.section	.text.__vector_12,"ax",@progbits
 297               	.global	__vector_12
 299               	__vector_12:
 300               	.LFB13:
 106:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #ifdef BACKLIGHT_ENABLE
 107:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     backlight_init();
 108:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #endif
 109:./tmk_keyboard/tmk_core/common/avr/suspend.c **** }
 110:./tmk_keyboard/tmk_core/common/avr/suspend.c **** 
 111:./tmk_keyboard/tmk_core/common/avr/suspend.c **** #ifndef NO_SUSPEND_POWER_DOWN
 112:./tmk_keyboard/tmk_core/common/avr/suspend.c **** /* watchdog timeout */
 113:./tmk_keyboard/tmk_core/common/avr/suspend.c **** ISR(WDT_vect)
 114:./tmk_keyboard/tmk_core/common/avr/suspend.c **** {
 301               		.loc 1 114 1 view -0
 302               		.cfi_startproc
 303 0000 1F92 1FB6 		__gcc_isr 1
 303      1F92 1124 
 303      8F93 
 304 000a 9F93      		push r25
 305               	.LCFI2:
 306               		.cfi_def_cfa_offset 3
 307               		.cfi_offset 25, -2
 308 000c AF93      		push r26
 309               	.LCFI3:
 310               		.cfi_def_cfa_offset 4
 311               		.cfi_offset 26, -3
 312 000e BF93      		push r27
 313               	.LCFI4:
 314               		.cfi_def_cfa_offset 5
 315               		.cfi_offset 27, -4
 316               	/* prologue: Signal */
 317               	/* frame size = 0 */
 318               	/* stack size = 3...7 */
 319               	.L__stack_usage = 3 + __gcc_isr.n_pushed
 115:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     // compensate timer for sleep
 116:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     switch (wdt_timeout) {
 320               		.loc 1 116 5 view .LVU65
 321 0010 8091 0000 		lds r24,wdt_timeout
 322 0014 8111      		cpse r24,__zero_reg__
 323 0016 00C0      		rjmp .L11
 117:./tmk_keyboard/tmk_core/common/avr/suspend.c ****         case WDTO_15MS:
 118:./tmk_keyboard/tmk_core/common/avr/suspend.c ****             timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
 324               		.loc 1 118 13 view .LVU66
 325               		.loc 1 118 25 is_stmt 0 view .LVU67
 326 0018 8091 0000 		lds r24,timer_count
 327 001c 9091 0000 		lds r25,timer_count+1
 328 0020 A091 0000 		lds r26,timer_count+2
 329 0024 B091 0000 		lds r27,timer_count+3
 330 0028 4196      		adiw r24,17
 331 002a A11D      		adc r26,__zero_reg__
 332 002c B11D      		adc r27,__zero_reg__
 333 002e 8093 0000 		sts timer_count,r24
 334 0032 9093 0000 		sts timer_count+1,r25
 335 0036 A093 0000 		sts timer_count+2,r26
 336 003a B093 0000 		sts timer_count+3,r27
 119:./tmk_keyboard/tmk_core/common/avr/suspend.c ****             break;
 337               		.loc 1 119 13 is_stmt 1 view .LVU68
 120:./tmk_keyboard/tmk_core/common/avr/suspend.c ****         default:
 121:./tmk_keyboard/tmk_core/common/avr/suspend.c ****             ;
 338               		.loc 1 121 13 view .LVU69
 339               	.L11:
 340               	/* epilogue start */
 122:./tmk_keyboard/tmk_core/common/avr/suspend.c ****     }
 123:./tmk_keyboard/tmk_core/common/avr/suspend.c **** }
 341               		.loc 1 123 1 is_stmt 0 view .LVU70
 342 003e BF91      		pop r27
 343 0040 AF91      		pop r26
 344 0042 9F91      		pop r25
 345 0044 8F91 1F90 		__gcc_isr 2
 345      1FBE 1F90 
 346 004c 1895      		reti
 347               		__gcc_isr 0,r24
 348               		.cfi_endproc
 349               	.LFE13:
 351               		.section	.bss.wdt_timeout,"aw",@nobits
 354               	wdt_timeout:
 355 0000 00        		.zero	1
 356               		.text
 357               	.Letext0:
 358               		.file 3 "/usr/avr/include/stdint.h"
 359               		.file 4 "./tmk_keyboard/tmk_core/common/matrix.h"
 360               		.file 5 "./tmk_keyboard/tmk_core/common/timer.h"
 361               		.file 6 "./tmk_keyboard/tmk_core/common/action.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 suspend.c
     /tmp/cc3BH6gV.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc3BH6gV.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc3BH6gV.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc3BH6gV.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cc3BH6gV.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc3BH6gV.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc3BH6gV.s:14     .text.suspend_idle:0000000000000000 suspend_idle
     /tmp/cc3BH6gV.s:72     .text.suspend_power_down:0000000000000000 suspend_power_down
     /tmp/cc3BH6gV.s:354    .bss.wdt_timeout:0000000000000000 wdt_timeout
     /tmp/cc3BH6gV.s:173    .text.matrix_power_up:0000000000000000 matrix_power_up
     /tmp/cc3BH6gV.s:173    .text.matrix_power_up:0000000000000000 matrix_power_up.localalias
     /tmp/cc3BH6gV.s:191    .text.matrix_power_down:0000000000000000 matrix_power_down
     /tmp/cc3BH6gV.s:206    .text.suspend_wakeup_condition:0000000000000000 suspend_wakeup_condition
     /tmp/cc3BH6gV.s:282    .text.suspend_wakeup_init:0000000000000000 suspend_wakeup_init
     /tmp/cc3BH6gV.s:299    .text.__vector_12:0000000000000000 __vector_12
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001

UNDEFINED SYMBOLS
matrix_scan
matrix_get_row
clear_keyboard
timer_count
__do_clear_bss
