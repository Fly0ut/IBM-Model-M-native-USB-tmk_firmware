   1               		.file	"action_macro.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.action_macro_play,"ax",@progbits
  12               	.global	action_macro_play
  14               	action_macro_play:
  15               	.LVL0:
  16               	.LFB10:
  17               		.file 1 "./tmk_keyboard/tmk_core/common/action_macro.c"
   1:./tmk_keyboard/tmk_core/common/action_macro.c **** /*
   2:./tmk_keyboard/tmk_core/common/action_macro.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_keyboard/tmk_core/common/action_macro.c **** 
   4:./tmk_keyboard/tmk_core/common/action_macro.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_keyboard/tmk_core/common/action_macro.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_keyboard/tmk_core/common/action_macro.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_keyboard/tmk_core/common/action_macro.c **** (at your option) any later version.
   8:./tmk_keyboard/tmk_core/common/action_macro.c **** 
   9:./tmk_keyboard/tmk_core/common/action_macro.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_keyboard/tmk_core/common/action_macro.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_keyboard/tmk_core/common/action_macro.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_keyboard/tmk_core/common/action_macro.c **** GNU General Public License for more details.
  13:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  14:./tmk_keyboard/tmk_core/common/action_macro.c **** You should have received a copy of the GNU General Public License
  15:./tmk_keyboard/tmk_core/common/action_macro.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_keyboard/tmk_core/common/action_macro.c **** */
  17:./tmk_keyboard/tmk_core/common/action_macro.c **** #include "action.h"
  18:./tmk_keyboard/tmk_core/common/action_macro.c **** #include "action_util.h"
  19:./tmk_keyboard/tmk_core/common/action_macro.c **** #include "action_macro.h"
  20:./tmk_keyboard/tmk_core/common/action_macro.c **** #include "wait.h"
  21:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  22:./tmk_keyboard/tmk_core/common/action_macro.c **** #ifdef DEBUG_ACTION
  23:./tmk_keyboard/tmk_core/common/action_macro.c **** #include "debug.h"
  24:./tmk_keyboard/tmk_core/common/action_macro.c **** #else
  25:./tmk_keyboard/tmk_core/common/action_macro.c **** #include "nodebug.h"
  26:./tmk_keyboard/tmk_core/common/action_macro.c **** #endif
  27:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  28:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  29:./tmk_keyboard/tmk_core/common/action_macro.c **** #ifndef NO_ACTION_MACRO
  30:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  31:./tmk_keyboard/tmk_core/common/action_macro.c **** #define MACRO_READ()  (macro = MACRO_GET(macro_p++))
  32:./tmk_keyboard/tmk_core/common/action_macro.c **** void action_macro_play(const macro_t *macro_p)
  33:./tmk_keyboard/tmk_core/common/action_macro.c **** {
  18               		.loc 1 33 1 view -0
  19               		.cfi_startproc
  20               		.loc 1 33 1 is_stmt 0 view .LVU1
  21 0000 DF92      		push r13
  22               	.LCFI0:
  23               		.cfi_def_cfa_offset 3
  24               		.cfi_offset 13, -2
  25 0002 EF92      		push r14
  26               	.LCFI1:
  27               		.cfi_def_cfa_offset 4
  28               		.cfi_offset 14, -3
  29 0004 FF92      		push r15
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 5
  32               		.cfi_offset 15, -4
  33 0006 0F93      		push r16
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 6
  36               		.cfi_offset 16, -5
  37 0008 1F93      		push r17
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 7
  40               		.cfi_offset 17, -6
  41 000a CF93      		push r28
  42               	.LCFI5:
  43               		.cfi_def_cfa_offset 8
  44               		.cfi_offset 28, -7
  45 000c DF93      		push r29
  46               	.LCFI6:
  47               		.cfi_def_cfa_offset 9
  48               		.cfi_offset 29, -8
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 7 */
  52               	.L__stack_usage = 7
  53 000e 9C01      		movw r18,r24
  34:./tmk_keyboard/tmk_core/common/action_macro.c ****     macro_t macro = END;
  54               		.loc 1 34 5 is_stmt 1 view .LVU2
  55               	.LVL1:
  35:./tmk_keyboard/tmk_core/common/action_macro.c ****     uint8_t interval = 0;
  56               		.loc 1 35 5 view .LVU3
  36:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  37:./tmk_keyboard/tmk_core/common/action_macro.c ****     uint8_t mod_storage = 0;
  57               		.loc 1 37 5 view .LVU4
  38:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  39:./tmk_keyboard/tmk_core/common/action_macro.c ****     if (!macro_p) return;
  58               		.loc 1 39 5 view .LVU5
  59               		.loc 1 39 8 is_stmt 0 view .LVU6
  60 0010 892B      		or r24,r25
  61 0012 01F0      		breq .L1
  37:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  62               		.loc 1 37 13 view .LVU7
  63 0014 F12C      		mov r15,__zero_reg__
  35:./tmk_keyboard/tmk_core/common/action_macro.c **** 
  64               		.loc 1 35 13 view .LVU8
  65 0016 E12C      		mov r14,__zero_reg__
  40:./tmk_keyboard/tmk_core/common/action_macro.c ****     while (true) {
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****         switch (MACRO_READ()) {
  42:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  43:./tmk_keyboard/tmk_core/common/action_macro.c ****                 MACRO_READ();
  44:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
  45:./tmk_keyboard/tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  46:./tmk_keyboard/tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
  66               		.loc 1 46 35 view .LVU9
  67 0018 DD24      		clr r13
  68 001a D394      		inc r13
  69               	.LVL2:
  70               	.L21:
  40:./tmk_keyboard/tmk_core/common/action_macro.c ****     while (true) {
  71               		.loc 1 40 5 is_stmt 1 view .LVU10
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  72               		.loc 1 41 9 view .LVU11
  73               	.LBB13:
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  74               		.loc 1 41 17 view .LVU12
  75 001c E901      		movw r28,r18
  76 001e 2196      		adiw r28,1
  77               	.LVL3:
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  78               		.loc 1 41 17 view .LVU13
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  79               		.loc 1 41 17 view .LVU14
  80 0020 F901      		movw r30,r18
  81               	/* #APP */
  82               	 ;  41 "./tmk_keyboard/tmk_core/common/action_macro.c" 1
  83 0022 8491      		lpm r24, Z
  84               		
  85               	 ;  0 "" 2
  86               	.LVL4:
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  87               		.loc 1 41 17 view .LVU15
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  88               		.loc 1 41 17 is_stmt 0 view .LVU16
  89               	/* #NOAPP */
  90               	.LBE13:
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  91               		.loc 1 41 9 view .LVU17
  92 0024 8537      		cpi r24,lo8(117)
  93 0026 01F4      		brne .+2
  94 0028 00C0      		rjmp .L3
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
  95               		.loc 1 41 9 view .LVU18
  96 002a 00F4      		brsh .L4
  97 002c 8437      		cpi r24,lo8(116)
  98 002e 01F4      		brne .+2
  99 0030 00C0      		rjmp .L5
 100 0032 8430      		cpi r24,lo8(4)
 101 0034 00F0      		brlo .+2
 102 0036 00C0      		rjmp .L6
 103 0038 8130      		cpi r24,lo8(1)
 104 003a 01F0      		breq .L7
 105 003c 8230      		cpi r24,lo8(2)
 106 003e 01F4      		brne .+2
 107 0040 00C0      		rjmp .L8
 108               	.LVL5:
 109               	.L1:
 110               	/* epilogue start */
  47:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
  48:./tmk_keyboard/tmk_core/common/action_macro.c ****                 } else {
  49:./tmk_keyboard/tmk_core/common/action_macro.c ****                     register_code(macro);
  50:./tmk_keyboard/tmk_core/common/action_macro.c ****                 }
  51:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  52:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_UP:
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 MACRO_READ();
  54:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
  55:./tmk_keyboard/tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
  56:./tmk_keyboard/tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
  57:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
  58:./tmk_keyboard/tmk_core/common/action_macro.c ****                 } else {
  59:./tmk_keyboard/tmk_core/common/action_macro.c ****                     unregister_code(macro);
  60:./tmk_keyboard/tmk_core/common/action_macro.c ****                 }
  61:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  62:./tmk_keyboard/tmk_core/common/action_macro.c ****             case WAIT:
  63:./tmk_keyboard/tmk_core/common/action_macro.c ****                 MACRO_READ();
  64:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
  65:./tmk_keyboard/tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
  66:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  67:./tmk_keyboard/tmk_core/common/action_macro.c ****             case INTERVAL:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 interval = MACRO_READ();
  69:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
  70:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  71:./tmk_keyboard/tmk_core/common/action_macro.c ****             case MOD_STORE:
  72:./tmk_keyboard/tmk_core/common/action_macro.c ****                 mod_storage = get_mods();
  73:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  74:./tmk_keyboard/tmk_core/common/action_macro.c ****             case MOD_RESTORE:
  75:./tmk_keyboard/tmk_core/common/action_macro.c ****                 set_mods(mod_storage);
  76:./tmk_keyboard/tmk_core/common/action_macro.c ****                 send_keyboard_report();
  77:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  78:./tmk_keyboard/tmk_core/common/action_macro.c ****             case MOD_CLEAR:
  79:./tmk_keyboard/tmk_core/common/action_macro.c ****                 clear_mods();
  80:./tmk_keyboard/tmk_core/common/action_macro.c ****                 send_keyboard_report();
  81:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  82:./tmk_keyboard/tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
  83:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("DOWN(%02X)\n", macro);
  84:./tmk_keyboard/tmk_core/common/action_macro.c ****                 register_code(macro);
  85:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  86:./tmk_keyboard/tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
  87:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("UP(%02X)\n", macro);
  88:./tmk_keyboard/tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
  89:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
  90:./tmk_keyboard/tmk_core/common/action_macro.c ****             case END:
  91:./tmk_keyboard/tmk_core/common/action_macro.c ****             default:
  92:./tmk_keyboard/tmk_core/common/action_macro.c ****                 return;
  93:./tmk_keyboard/tmk_core/common/action_macro.c ****         }
  94:./tmk_keyboard/tmk_core/common/action_macro.c ****         // interval
  95:./tmk_keyboard/tmk_core/common/action_macro.c ****         { uint8_t ms = interval; while (ms--) wait_ms(1); }
  96:./tmk_keyboard/tmk_core/common/action_macro.c ****     }
  97:./tmk_keyboard/tmk_core/common/action_macro.c **** }
 111               		.loc 1 97 1 view .LVU19
 112 0042 DF91      		pop r29
 113 0044 CF91      		pop r28
 114 0046 1F91      		pop r17
 115 0048 0F91      		pop r16
 116 004a FF90      		pop r15
 117 004c EF90      		pop r14
 118 004e DF90      		pop r13
 119 0050 0895      		ret
 120               	.LVL6:
 121               	.L4:
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
 122               		.loc 1 41 9 view .LVU20
 123 0052 8837      		cpi r24,lo8(120)
 124 0054 01F4      		brne .+2
 125 0056 00C0      		rjmp .L9
 126 0058 00F4      		brsh .L10
 127 005a 8637      		cpi r24,lo8(118)
 128 005c 01F4      		brne .+2
 129 005e 00C0      		rjmp .L11
 130 0060 8737      		cpi r24,lo8(119)
 131 0062 01F4      		brne .L1
  75:./tmk_keyboard/tmk_core/common/action_macro.c ****                 send_keyboard_report();
 132               		.loc 1 75 17 is_stmt 1 view .LVU21
 133 0064 8F2D      		mov r24,r15
 134               	.LVL7:
  75:./tmk_keyboard/tmk_core/common/action_macro.c ****                 send_keyboard_report();
 135               		.loc 1 75 17 is_stmt 0 view .LVU22
 136 0066 0E94 0000 		call set_mods
 137               	.LVL8:
  76:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 138               		.loc 1 76 17 is_stmt 1 view .LVU23
 139               	.L29:
  80:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 140               		.loc 1 80 17 view .LVU24
 141 006a 0E94 0000 		call send_keyboard_report
 142               	.LVL9:
  81:./tmk_keyboard/tmk_core/common/action_macro.c ****             case 0x04 ... 0x73:
 143               		.loc 1 81 17 view .LVU25
 144 006e 00C0      		rjmp .L15
 145               	.LVL10:
 146               	.L10:
  41:./tmk_keyboard/tmk_core/common/action_macro.c ****             case KEY_DOWN:
 147               		.loc 1 41 9 is_stmt 0 view .LVU26
 148 0070 9CE7      		ldi r25,lo8(124)
 149 0072 980F      		add r25,r24
 150 0074 9037      		cpi r25,lo8(112)
 151 0076 00F4      		brsh .L1
  87:./tmk_keyboard/tmk_core/common/action_macro.c ****                 unregister_code(macro&0x7F);
 152               		.loc 1 87 17 is_stmt 1 view .LVU27
  88:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 153               		.loc 1 88 17 view .LVU28
 154 0078 8F77      		andi r24,lo8(127)
 155               	.LVL11:
  88:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 156               		.loc 1 88 17 is_stmt 0 view .LVU29
 157 007a 0E94 0000 		call unregister_code
 158               	.LVL12:
  89:./tmk_keyboard/tmk_core/common/action_macro.c ****             case END:
 159               		.loc 1 89 17 is_stmt 1 view .LVU30
 160 007e 00C0      		rjmp .L15
 161               	.LVL13:
 162               	.L7:
  43:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 163               		.loc 1 43 17 view .LVU31
 164               	.LBB14:
  43:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 165               		.loc 1 43 17 view .LVU32
 166 0080 8901      		movw r16,r18
 167 0082 0E5F      		subi r16,-2
 168 0084 1F4F      		sbci r17,-1
 169               	.LVL14:
  43:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 170               		.loc 1 43 17 view .LVU33
  43:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 171               		.loc 1 43 17 view .LVU34
 172 0086 FE01      		movw r30,r28
 173               	/* #APP */
 174               	 ;  43 "./tmk_keyboard/tmk_core/common/action_macro.c" 1
 175 0088 8491      		lpm r24, Z
 176               		
 177               	 ;  0 "" 2
 178               	.LVL15:
  43:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 179               		.loc 1 43 17 view .LVU35
  43:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_DOWN(%02X)\n", macro);
 180               		.loc 1 43 17 is_stmt 0 view .LVU36
 181               	/* #NOAPP */
 182               	.LBE14:
  44:./tmk_keyboard/tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
 183               		.loc 1 44 17 is_stmt 1 view .LVU37
  45:./tmk_keyboard/tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
 184               		.loc 1 45 17 view .LVU38
  45:./tmk_keyboard/tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
 185               		.loc 1 45 21 is_stmt 0 view .LVU39
 186 008a 90E2      		ldi r25,lo8(32)
 187 008c 980F      		add r25,r24
  45:./tmk_keyboard/tmk_core/common/action_macro.c ****                     add_weak_mods(MOD_BIT(macro));
 188               		.loc 1 45 20 view .LVU40
 189 008e 9830      		cpi r25,lo8(8)
 190 0090 00F4      		brsh .L14
  46:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 191               		.loc 1 46 21 is_stmt 1 view .LVU41
  46:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 192               		.loc 1 46 35 is_stmt 0 view .LVU42
 193 0092 8770      		andi r24,lo8(7)
 194               	.LVL16:
  46:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 195               		.loc 1 46 21 view .LVU43
 196 0094 FD2D      		mov r31,r13
 197 0096 00C0      		rjmp 2f
 198               		1:
 199 0098 FF0F      		lsl r31
 200               		2:
 201 009a 8A95      		dec r24
 202 009c 02F4      		brpl 1b
 203 009e 8F2F      		mov r24,r31
 204 00a0 0E94 0000 		call add_weak_mods
 205               	.LVL17:
  47:./tmk_keyboard/tmk_core/common/action_macro.c ****                 } else {
 206               		.loc 1 47 21 is_stmt 1 view .LVU44
 207               	.L26:
  57:./tmk_keyboard/tmk_core/common/action_macro.c ****                 } else {
 208               		.loc 1 57 21 view .LVU45
 209 00a4 0E94 0000 		call send_keyboard_report
 210               	.LVL18:
 211 00a8 00C0      		rjmp .L27
 212               	.LVL19:
 213               	.L14:
  49:./tmk_keyboard/tmk_core/common/action_macro.c ****                 }
 214               		.loc 1 49 21 view .LVU46
 215 00aa 0E94 0000 		call register_code
 216               	.LVL20:
 217               	.L27:
 218               	.LBB15:
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 219               		.loc 1 53 17 is_stmt 0 view .LVU47
 220 00ae E801      		movw r28,r16
 221               	.LVL21:
 222               	.L15:
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 223               		.loc 1 53 17 view .LVU48
 224               	.LBE15:
 225               	.LBB16:
  95:./tmk_keyboard/tmk_core/common/action_macro.c ****     }
 226               		.loc 1 95 11 is_stmt 1 view .LVU49
  95:./tmk_keyboard/tmk_core/common/action_macro.c ****     }
 227               		.loc 1 95 34 view .LVU50
  95:./tmk_keyboard/tmk_core/common/action_macro.c ****     }
 228               		.loc 1 95 40 is_stmt 0 view .LVU51
 229 00b0 8E2D      		mov r24,r14
 230               	.LVL22:
 231               	.L19:
  95:./tmk_keyboard/tmk_core/common/action_macro.c ****     }
 232               		.loc 1 95 41 is_stmt 1 discriminator 1 view .LVU52
  95:./tmk_keyboard/tmk_core/common/action_macro.c ****     }
 233               		.loc 1 95 41 is_stmt 0 discriminator 1 view .LVU53
 234 00b2 8111      		cpse r24,__zero_reg__
 235 00b4 00C0      		rjmp .L20
 236 00b6 9E01      		movw r18,r28
 237 00b8 00C0      		rjmp .L21
 238               	.LVL23:
 239               	.L8:
  95:./tmk_keyboard/tmk_core/common/action_macro.c ****     }
 240               		.loc 1 95 41 discriminator 1 view .LVU54
 241               	.LBE16:
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 242               		.loc 1 53 17 is_stmt 1 view .LVU55
 243               	.LBB19:
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 244               		.loc 1 53 17 view .LVU56
 245 00ba 8901      		movw r16,r18
 246 00bc 0E5F      		subi r16,-2
 247 00be 1F4F      		sbci r17,-1
 248               	.LVL24:
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 249               		.loc 1 53 17 view .LVU57
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 250               		.loc 1 53 17 view .LVU58
 251 00c0 FE01      		movw r30,r28
 252               	/* #APP */
 253               	 ;  53 "./tmk_keyboard/tmk_core/common/action_macro.c" 1
 254 00c2 8491      		lpm r24, Z
 255               		
 256               	 ;  0 "" 2
 257               	.LVL25:
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 258               		.loc 1 53 17 view .LVU59
  53:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("KEY_UP(%02X)\n", macro);
 259               		.loc 1 53 17 is_stmt 0 view .LVU60
 260               	/* #NOAPP */
 261               	.LBE19:
  54:./tmk_keyboard/tmk_core/common/action_macro.c ****                 if (IS_MOD(macro)) {
 262               		.loc 1 54 17 is_stmt 1 view .LVU61
  55:./tmk_keyboard/tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
 263               		.loc 1 55 17 view .LVU62
  55:./tmk_keyboard/tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
 264               		.loc 1 55 21 is_stmt 0 view .LVU63
 265 00c4 90E2      		ldi r25,lo8(32)
 266 00c6 980F      		add r25,r24
  55:./tmk_keyboard/tmk_core/common/action_macro.c ****                     del_weak_mods(MOD_BIT(macro));
 267               		.loc 1 55 20 view .LVU64
 268 00c8 9830      		cpi r25,lo8(8)
 269 00ca 00F4      		brsh .L16
  56:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 270               		.loc 1 56 21 is_stmt 1 view .LVU65
  56:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 271               		.loc 1 56 35 is_stmt 0 view .LVU66
 272 00cc 8770      		andi r24,lo8(7)
 273               	.LVL26:
  56:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 274               		.loc 1 56 21 view .LVU67
 275 00ce FD2D      		mov r31,r13
 276 00d0 00C0      		rjmp 2f
 277               		1:
 278 00d2 FF0F      		lsl r31
 279               		2:
 280 00d4 8A95      		dec r24
 281 00d6 02F4      		brpl 1b
 282 00d8 8F2F      		mov r24,r31
 283 00da 0E94 0000 		call del_weak_mods
 284               	.LVL27:
  56:./tmk_keyboard/tmk_core/common/action_macro.c ****                     send_keyboard_report();
 285               		.loc 1 56 21 view .LVU68
 286 00de 00C0      		rjmp .L26
 287               	.LVL28:
 288               	.L16:
  59:./tmk_keyboard/tmk_core/common/action_macro.c ****                 }
 289               		.loc 1 59 21 is_stmt 1 view .LVU69
 290 00e0 0E94 0000 		call unregister_code
 291               	.LVL29:
  59:./tmk_keyboard/tmk_core/common/action_macro.c ****                 }
 292               		.loc 1 59 21 is_stmt 0 view .LVU70
 293 00e4 00C0      		rjmp .L27
 294               	.LVL30:
 295               	.L5:
  63:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 296               		.loc 1 63 17 is_stmt 1 view .LVU71
 297               	.LBB20:
  63:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 298               		.loc 1 63 17 view .LVU72
 299 00e6 2E5F      		subi r18,-2
 300 00e8 3F4F      		sbci r19,-1
 301               	.LVL31:
  63:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 302               		.loc 1 63 17 view .LVU73
  63:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 303               		.loc 1 63 17 view .LVU74
 304 00ea FE01      		movw r30,r28
 305               	.LVL32:
  63:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 306               		.loc 1 63 17 is_stmt 0 view .LVU75
 307               	/* #APP */
 308               	 ;  63 "./tmk_keyboard/tmk_core/common/action_macro.c" 1
 309 00ec C491      		lpm r28, Z
 310               		
 311               	 ;  0 "" 2
 312               	.LVL33:
  63:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 313               		.loc 1 63 17 is_stmt 1 view .LVU76
  63:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("WAIT(%u)\n", macro);
 314               		.loc 1 63 17 is_stmt 0 view .LVU77
 315               	/* #NOAPP */
 316               	.LBE20:
  64:./tmk_keyboard/tmk_core/common/action_macro.c ****                 { uint8_t ms = macro; while (ms--) wait_ms(1); }
 317               		.loc 1 64 17 is_stmt 1 view .LVU78
 318               	.LBB21:
  65:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 319               		.loc 1 65 19 view .LVU79
  65:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 320               		.loc 1 65 39 view .LVU80
 321               	.L17:
  65:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 322               		.loc 1 65 46 discriminator 1 view .LVU81
  65:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 323               		.loc 1 65 46 is_stmt 0 discriminator 1 view .LVU82
 324 00ee C111      		cpse r28,__zero_reg__
 325 00f0 00C0      		rjmp .L18
 326               	.LVL34:
 327               	.L28:
  65:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 328               		.loc 1 65 46 discriminator 1 view .LVU83
 329               	.LBE21:
 330               	.LBB24:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 331               		.loc 1 68 28 is_stmt 1 view .LVU84
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 332               		.loc 1 68 28 is_stmt 0 view .LVU85
 333               	.LBE24:
  69:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 334               		.loc 1 69 17 is_stmt 1 view .LVU86
  70:./tmk_keyboard/tmk_core/common/action_macro.c ****             case MOD_STORE:
 335               		.loc 1 70 17 view .LVU87
 336               	.LBB25:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 337               		.loc 1 68 28 is_stmt 0 view .LVU88
 338 00f2 E901      		movw r28,r18
 339               	.LBE25:
  70:./tmk_keyboard/tmk_core/common/action_macro.c ****             case MOD_STORE:
 340               		.loc 1 70 17 view .LVU89
 341 00f4 00C0      		rjmp .L15
 342               	.LVL35:
 343               	.L18:
 344               	.LBB26:
  65:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 345               		.loc 1 65 52 is_stmt 1 view .LVU90
 346               	.LBB22:
 347               	.LBI22:
 348               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 349               		.loc 2 166 1 view .LVU91
 350               	.LBB23:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 351               		.loc 2 168 2 view .LVU92
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 352               		.loc 2 172 2 view .LVU93
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 353               		.loc 2 173 2 view .LVU94
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 354               		.loc 2 174 2 view .LVU95
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 355               		.loc 2 184 3 view .LVU96
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 356               		.loc 2 187 2 view .LVU97
 357 00f6 8FE9      		ldi r24,lo8(3999)
 358 00f8 9FE0      		ldi r25,hi8(3999)
 359 00fa 0197      	1:	sbiw r24,1
 360 00fc 01F4      		brne 1b
 361 00fe 00C0      		rjmp .
 362 0100 0000      		nop
 363 0102 C150      		subi r28,lo8(-(-1))
 364               	.LVL36:
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 365               		.loc 2 210 1 is_stmt 0 view .LVU98
 366 0104 00C0      		rjmp .L17
 367               	.LVL37:
 368               	.L3:
 369               		.loc 2 210 1 view .LVU99
 370               	.LBE23:
 371               	.LBE22:
 372               	.LBE26:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 373               		.loc 1 68 17 is_stmt 1 view .LVU100
 374               	.LBB27:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 375               		.loc 1 68 28 view .LVU101
 376 0106 2E5F      		subi r18,-2
 377 0108 3F4F      		sbci r19,-1
 378               	.LVL38:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 379               		.loc 1 68 28 view .LVU102
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 380               		.loc 1 68 28 view .LVU103
 381 010a FE01      		movw r30,r28
 382               	.LVL39:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 383               		.loc 1 68 28 is_stmt 0 view .LVU104
 384               	/* #APP */
 385               	 ;  68 "./tmk_keyboard/tmk_core/common/action_macro.c" 1
 386 010c E490      		lpm r14, Z
 387               		
 388               	 ;  0 "" 2
 389               	.LVL40:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 390               		.loc 1 68 28 view .LVU105
 391               	/* #NOAPP */
 392 010e 00C0      		rjmp .L28
 393               	.LVL41:
 394               	.L11:
  68:./tmk_keyboard/tmk_core/common/action_macro.c ****                 dprintf("INTERVAL(%u)\n", interval);
 395               		.loc 1 68 28 view .LVU106
 396               	.LBE27:
  72:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 397               		.loc 1 72 17 is_stmt 1 view .LVU107
  72:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 398               		.loc 1 72 31 is_stmt 0 view .LVU108
 399 0110 0E94 0000 		call get_mods
 400               	.LVL42:
  72:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 401               		.loc 1 72 31 view .LVU109
 402 0114 F82E      		mov r15,r24
 403               	.LVL43:
  73:./tmk_keyboard/tmk_core/common/action_macro.c ****             case MOD_RESTORE:
 404               		.loc 1 73 17 is_stmt 1 view .LVU110
 405 0116 00C0      		rjmp .L15
 406               	.LVL44:
 407               	.L9:
  79:./tmk_keyboard/tmk_core/common/action_macro.c ****                 send_keyboard_report();
 408               		.loc 1 79 17 view .LVU111
 409 0118 0E94 0000 		call clear_mods
 410               	.LVL45:
  79:./tmk_keyboard/tmk_core/common/action_macro.c ****                 send_keyboard_report();
 411               		.loc 1 79 17 is_stmt 0 view .LVU112
 412 011c 00C0      		rjmp .L29
 413               	.LVL46:
 414               	.L6:
  83:./tmk_keyboard/tmk_core/common/action_macro.c ****                 register_code(macro);
 415               		.loc 1 83 17 is_stmt 1 view .LVU113
  84:./tmk_keyboard/tmk_core/common/action_macro.c ****                 break;
 416               		.loc 1 84 17 view .LVU114
 417 011e 0E94 0000 		call register_code
 418               	.LVL47:
  85:./tmk_keyboard/tmk_core/common/action_macro.c ****             case 0x84 ... 0xF3:
 419               		.loc 1 85 17 view .LVU115
 420 0122 00C0      		rjmp .L15
 421               	.LVL48:
 422               	.L20:
 423               	.LBB28:
  95:./tmk_keyboard/tmk_core/common/action_macro.c ****     }
 424               		.loc 1 95 47 view .LVU116
 425               	.LBB17:
 426               	.LBI17:
 166:/usr/avr/include/util/delay.h **** {
 427               		.loc 2 166 1 view .LVU117
 428               	.LBB18:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 429               		.loc 2 168 2 view .LVU118
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 430               		.loc 2 172 2 view .LVU119
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 431               		.loc 2 173 2 view .LVU120
 174:/usr/avr/include/util/delay.h **** 
 432               		.loc 2 174 2 view .LVU121
 184:/usr/avr/include/util/delay.h **** 	#endif
 433               		.loc 2 184 3 view .LVU122
 187:/usr/avr/include/util/delay.h **** 
 434               		.loc 2 187 2 view .LVU123
 435 0124 EFE9      		ldi r30,lo8(3999)
 436 0126 FFE0      		ldi r31,hi8(3999)
 437 0128 3197      	1:	sbiw r30,1
 438 012a 01F4      		brne 1b
 439 012c 00C0      		rjmp .
 440 012e 0000      		nop
 441 0130 8150      		subi r24,lo8(-(-1))
 442               	.LVL49:
 443               		.loc 2 210 1 is_stmt 0 view .LVU124
 444 0132 00C0      		rjmp .L19
 445               	.LBE18:
 446               	.LBE17:
 447               	.LBE28:
 448               		.cfi_endproc
 449               	.LFE10:
 451               		.text
 452               	.Letext0:
 453               		.file 3 "/usr/avr/include/stdint.h"
 454               		.file 4 "./tmk_keyboard/tmk_core/common/action_macro.h"
 455               		.file 5 "./tmk_keyboard/tmk_core/common/keycode.h"
 456               		.file 6 "./tmk_keyboard/tmk_core/common/action_util.h"
 457               		.file 7 "./tmk_keyboard/tmk_core/common/action.h"
 458               		.file 8 "/usr/avr/include/math.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 action_macro.c
     /tmp/ccE3eB3S.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccE3eB3S.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccE3eB3S.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccE3eB3S.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccE3eB3S.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccE3eB3S.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccE3eB3S.s:14     .text.action_macro_play:0000000000000000 action_macro_play

UNDEFINED SYMBOLS
set_mods
send_keyboard_report
unregister_code
add_weak_mods
register_code
del_weak_mods
get_mods
clear_mods
