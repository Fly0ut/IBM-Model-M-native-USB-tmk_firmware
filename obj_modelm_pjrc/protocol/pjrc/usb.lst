   1               		.file	"usb.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               		.section	.text.usb_wait_in_ready,"ax",@progbits
  13               	usb_wait_in_ready:
  14               	.LFB8:
  15               		.file 1 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c"
   1:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /* USB Keyboard Plus Debug Channel Example for Teensy USB Development Board
   2:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * http://www.pjrc.com/teensy/usb_keyboard.html
   3:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * Copyright (c) 2009 PJRC.COM, LLC
   4:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * 
   5:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   6:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * of this software and associated documentation files (the "Software"), to deal
   7:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * in the Software without restriction, including without limitation the rights
   8:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * copies of the Software, and to permit persons to whom the Software is
  10:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * furnished to do so, subject to the following conditions:
  11:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * 
  12:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * The above copyright notice and this permission notice shall be included in
  13:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * all copies or substantial portions of the Software.
  14:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * 
  15:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  * THE SOFTWARE.
  22:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  */
  23:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  24:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include <stdint.h>
  25:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include <stdbool.h>
  26:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include <avr/io.h>
  27:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include <avr/pgmspace.h>
  28:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include <avr/interrupt.h>
  29:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "usb.h"
  30:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "usb_keyboard.h"
  31:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "usb_mouse.h"
  32:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "usb_debug.h"
  33:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "usb_extra.h"
  34:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "led.h"
  35:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "print.h"
  36:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "util.h"
  37:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
  38:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "sleep_led.h"
  39:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
  40:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "suspend.h"
  41:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "action.h"
  42:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #include "action_util.h"
  43:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  44:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  45:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /**************************************************************************
  46:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
  47:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *  Configurable Options
  48:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
  49:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  **************************************************************************/
  50:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  51:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // You can change these to give your code its own name.
  52:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifndef MANUFACTURER
  53:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define STR_MANUFACTURER	L"t.m.k."
  54:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
  55:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define STR_MANUFACTURER	LSTR(MANUFACTURER)
  56:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
  57:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifndef PRODUCT
  58:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define STR_PRODUCT		L"t.m.k. keyboard"
  59:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
  60:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define STR_PRODUCT		LSTR(PRODUCT)
  61:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
  62:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  63:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  64:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // Mac OS-X and Linux automatically load the correct drivers.  On
  65:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // Windows, even though the driver is supplied by Microsoft, an
  66:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // INF file is needed to load the driver.  These numbers need to
  67:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // match the INF file.
  68:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifndef VENDOR_ID
  69:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define VENDOR_ID		0xFEED
  70:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
  71:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  72:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifndef PRODUCT_ID
  73:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define PRODUCT_ID		0xBABE
  74:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
  75:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  76:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifndef DEVICE_VER
  77:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define DEVICE_VER		0x0100
  78:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
  79:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  80:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  81:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // USB devices are supposed to implment a halt feature, which is
  82:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // rarely (if ever) used.  If you comment this line out, the halt
  83:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // code will be removed, saving 102 bytes of space (gcc 4.3.0).
  84:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // This is not strictly USB compliant, but works with all major
  85:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // operating systems.
  86:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define SUPPORT_ENDPOINT_HALT
  87:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  88:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  89:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  90:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /**************************************************************************
  91:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
  92:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *  Endpoint Buffer Configuration
  93:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
  94:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  **************************************************************************/
  95:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  96:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define ENDPOINT0_SIZE		32
  97:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  98:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** bool remote_wakeup = false;
  99:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** bool suspend = false;
 100:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 101:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // 0:control endpoint is enabled automatically by controller.
 102:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const uint8_t PROGMEM endpoint_config_table[] = {
 103:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// enable, UECFG0X(type, direction), UECFG1X(size, bank, allocation)
 104:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1, EP_TYPE_INTERRUPT_IN,  EP_SIZE(KBD_SIZE)      | KBD_BUFFER,      // 1
 105:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef MOUSE_ENABLE
 106:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1, EP_TYPE_INTERRUPT_IN,  EP_SIZE(MOUSE_SIZE)    | MOUSE_BUFFER,    // 2
 107:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 108:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0,                                                                  // 2
 109:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 110:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef CONSOLE_ENABLE
 111:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1, EP_TYPE_INTERRUPT_IN,  EP_SIZE(DEBUG_TX_SIZE) | DEBUG_TX_BUFFER, // 3
 112:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 113:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0,
 114:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 115:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef EXTRAKEY_ENABLE
 116:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1, EP_TYPE_INTERRUPT_IN,  EP_SIZE(EXTRA_SIZE)    | EXTRA_BUFFER,    // 4
 117:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 118:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0,                                                                  // 4
 119:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 120:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 121:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1, EP_TYPE_INTERRUPT_IN,  EP_SIZE(KBD2_SIZE)     | KBD2_BUFFER,     // 5
 122:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 123:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0,                                                                  // 5
 124:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 125:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0,                                                                  // 6
 126:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 127:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 128:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 129:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /**************************************************************************
 130:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
 131:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *  Descriptor Data
 132:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
 133:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  **************************************************************************/
 134:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 135:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // Descriptors are the data that your computer reads when it auto-detects
 136:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // this USB device (called "enumeration" in USB lingo).  The most commonly
 137:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // changed items are editable at the top of this file.  Changing things
 138:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // in here should only be done by those who've read chapter 9 of the USB
 139:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // spec and relevant portions of any USB class specifications!
 140:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 141:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 142:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const uint8_t PROGMEM device_descriptor[] = {
 143:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	18,					// bLength
 144:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bDescriptorType
 145:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00, 0x02,				// bcdUSB
 146:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bDeviceClass
 147:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bDeviceSubClass
 148:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bDeviceProtocol
 149:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	ENDPOINT0_SIZE,				// bMaxPacketSize0
 150:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	LSB(VENDOR_ID), MSB(VENDOR_ID),		// idVendor
 151:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	LSB(PRODUCT_ID), MSB(PRODUCT_ID),	// idProduct
 152:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	LSB(DEVICE_VER), MSB(DEVICE_VER),	// bcdDevice
 153:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// iManufacturer
 154:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	2,					// iProduct
 155:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// iSerialNumber
 156:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1					// bNumConfigurations
 157:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 158:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 159:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // Keyboard Protocol 1, HID 1.11 spec, Appendix B, page 59-60
 160:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const uint8_t PROGMEM keyboard_hid_report_desc[] = {
 161:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x05, 0x01,          // Usage Page (Generic Desktop),
 162:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x09, 0x06,          // Usage (Keyboard),
 163:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0xA1, 0x01,          // Collection (Application),
 164:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x01,          //   Report Size (1),
 165:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, 0x08,          //   Report Count (8),
 166:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x05, 0x07,          //   Usage Page (Key Codes),
 167:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x19, 0xE0,          //   Usage Minimum (224),
 168:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x29, 0xE7,          //   Usage Maximum (231),
 169:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x15, 0x00,          //   Logical Minimum (0),
 170:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x25, 0x01,          //   Logical Maximum (1),
 171:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x81, 0x02,          //   Input (Data, Variable, Absolute), ;Modifier byte
 172:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, 0x01,          //   Report Count (1),
 173:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x08,          //   Report Size (8),
 174:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x81, 0x03,          //   Input (Constant),                 ;Reserved byte
 175:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, 0x05,          //   Report Count (5),
 176:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x01,          //   Report Size (1),
 177:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x05, 0x08,          //   Usage Page (LEDs),
 178:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x19, 0x01,          //   Usage Minimum (1),
 179:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x29, 0x05,          //   Usage Maximum (5),
 180:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x91, 0x02,          //   Output (Data, Variable, Absolute), ;LED report
 181:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, 0x01,          //   Report Count (1),
 182:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x03,          //   Report Size (3),
 183:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x91, 0x03,          //   Output (Constant),                 ;LED report padding
 184:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, KBD_REPORT_KEYS,    //   Report Count (),
 185:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x08,          //   Report Size (8),
 186:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x15, 0x00,          //   Logical Minimum (0),
 187:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x26, 0xFF, 0x00,    //   Logical Maximum(255),
 188:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x05, 0x07,          //   Usage Page (Key Codes),
 189:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x19, 0x00,          //   Usage Minimum (0),
 190:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x29, 0xFF,          //   Usage Maximum (255),
 191:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x81, 0x00,          //   Input (Data, Array),
 192:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0xc0                 // End Collection
 193:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 194:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 195:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const uint8_t PROGMEM keyboard2_hid_report_desc[] = {
 196:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x05, 0x01,                     // Usage Page (Generic Desktop),
 197:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x09, 0x06,                     // Usage (Keyboard),
 198:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0xA1, 0x01,                     // Collection (Application),
 199:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         // bitmap of modifiers
 200:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x01,                     //   Report Size (1),
 201:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, 0x08,                     //   Report Count (8),
 202:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x05, 0x07,                     //   Usage Page (Key Codes),
 203:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x19, 0xE0,                     //   Usage Minimum (224),
 204:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x29, 0xE7,                     //   Usage Maximum (231),
 205:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x15, 0x00,                     //   Logical Minimum (0),
 206:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x25, 0x01,                     //   Logical Maximum (1),
 207:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x81, 0x02,                     //   Input (Data, Variable, Absolute), ;Modifier byte
 208:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         // LED output report
 209:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, 0x05,                     //   Report Count (5),
 210:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x01,                     //   Report Size (1),
 211:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x05, 0x08,                     //   Usage Page (LEDs),
 212:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x19, 0x01,                     //   Usage Minimum (1),
 213:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x29, 0x05,                     //   Usage Maximum (5),
 214:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x91, 0x02,                     //   Output (Data, Variable, Absolute),
 215:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, 0x01,                     //   Report Count (1),
 216:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x03,                     //   Report Size (3),
 217:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x91, 0x03,                     //   Output (Constant),
 218:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         // bitmap of keys
 219:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x95, KBD2_REPORT_KEYS*8,       //   Report Count (),
 220:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x75, 0x01,                     //   Report Size (1),
 221:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x15, 0x00,                     //   Logical Minimum (0),
 222:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x25, 0x01,                     //   Logical Maximum(1),
 223:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x05, 0x07,                     //   Usage Page (Key Codes),
 224:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x19, 0x00,                     //   Usage Minimum (0),
 225:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x29, KBD2_REPORT_KEYS*8-1,     //   Usage Maximum (),
 226:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0x81, 0x02,                     //   Input (Data, Variable, Absolute),
 227:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         0xc0                            // End Collection
 228:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 229:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 230:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 231:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef MOUSE_ENABLE
 232:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // Mouse Protocol 1, HID 1.11 spec, Appendix B, page 59-60, with wheel extension
 233:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // http://www.microchip.com/forums/tm.aspx?high=&m=391435&mpage=1#391521
 234:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // http://www.keil.com/forum/15671/
 235:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // http://www.microsoft.com/whdc/device/input/wheel.mspx
 236:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const uint8_t PROGMEM mouse_hid_report_desc[] = {
 237:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     /* mouse */
 238:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
 239:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x09, 0x02,                    // USAGE (Mouse)
 240:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0xa1, 0x01,                    // COLLECTION (Application)
 241:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     //0x85, REPORT_ID_MOUSE,         //   REPORT_ID (1)
 242:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x09, 0x01,                    //   USAGE (Pointer)
 243:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0xa1, 0x00,                    //   COLLECTION (Physical)
 244:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                    // ----------------------------  Buttons
 245:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x05, 0x09,                    //     USAGE_PAGE (Button)
 246:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x19, 0x01,                    //     USAGE_MINIMUM (Button 1)
 247:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x29, 0x05,                    //     USAGE_MAXIMUM (Button 5)
 248:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x15, 0x00,                    //     LOGICAL_MINIMUM (0)
 249:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x25, 0x01,                    //     LOGICAL_MAXIMUM (1)
 250:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x75, 0x01,                    //     REPORT_SIZE (1)
 251:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x95, 0x05,                    //     REPORT_COUNT (5)
 252:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x81, 0x02,                    //     INPUT (Data,Var,Abs)
 253:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x75, 0x03,                    //     REPORT_SIZE (3)
 254:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x95, 0x01,                    //     REPORT_COUNT (1)
 255:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x81, 0x03,                    //     INPUT (Cnst,Var,Abs)
 256:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                    // ----------------------------  X,Y position
 257:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x05, 0x01,                    //     USAGE_PAGE (Generic Desktop)
 258:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x09, 0x30,                    //     USAGE (X)
 259:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x09, 0x31,                    //     USAGE (Y)
 260:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x15, 0x81,                    //     LOGICAL_MINIMUM (-127)
 261:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x25, 0x7f,                    //     LOGICAL_MAXIMUM (127)
 262:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x75, 0x08,                    //     REPORT_SIZE (8)
 263:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x95, 0x02,                    //     REPORT_COUNT (2)
 264:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x81, 0x06,                    //     INPUT (Data,Var,Rel)
 265:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                    // ----------------------------  Vertical wheel
 266:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x09, 0x38,                    //     USAGE (Wheel)
 267:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x15, 0x81,                    //     LOGICAL_MINIMUM (-127)
 268:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x25, 0x7f,                    //     LOGICAL_MAXIMUM (127)
 269:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x35, 0x00,                    //     PHYSICAL_MINIMUM (0)        - reset physical
 270:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x45, 0x00,                    //     PHYSICAL_MAXIMUM (0)
 271:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x75, 0x08,                    //     REPORT_SIZE (8)
 272:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x95, 0x01,                    //     REPORT_COUNT (1)
 273:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x81, 0x06,                    //     INPUT (Data,Var,Rel)
 274:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                    // ----------------------------  Horizontal wheel
 275:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x05, 0x0c,                    //     USAGE_PAGE (Consumer Devices)
 276:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x0a, 0x38, 0x02,              //     USAGE (AC Pan)
 277:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x15, 0x81,                    //     LOGICAL_MINIMUM (-127)
 278:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x25, 0x7f,                    //     LOGICAL_MAXIMUM (127)
 279:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x75, 0x08,                    //     REPORT_SIZE (8)
 280:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x95, 0x01,                    //     REPORT_COUNT (1)
 281:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x81, 0x06,                    //     INPUT (Data,Var,Rel)
 282:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0xc0,                          //   END_COLLECTION
 283:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0xc0,                          // END_COLLECTION
 284:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 285:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 286:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 287:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const uint8_t PROGMEM debug_hid_report_desc[] = {
 288:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x06, 0x31, 0xFF,			// Usage Page 0xFF31 (vendor defined)
 289:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x09, 0x74,				// Usage 0x74
 290:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0xA1, 0x53,				// Collection 0x53
 291:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x75, 0x08,				// report size = 8 bits
 292:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x15, 0x00,				// logical minimum = 0
 293:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x26, 0xFF, 0x00,			// logical maximum = 255
 294:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x95, DEBUG_TX_SIZE,			// report count
 295:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x09, 0x75,				// usage
 296:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x81, 0x02,				// Input (array)
 297:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0xC0					// end collection
 298:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 299:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 300:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef EXTRAKEY_ENABLE
 301:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // audio controls & system controls
 302:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // http://www.microsoft.com/whdc/archive/w2kbd.mspx
 303:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const uint8_t PROGMEM extra_hid_report_desc[] = {
 304:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     /* system control */
 305:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
 306:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x09, 0x80,                    // USAGE (System Control)
 307:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0xa1, 0x01,                    // COLLECTION (Application)
 308:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x85, REPORT_ID_SYSTEM,        //   REPORT_ID (2)
 309:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x15, 0x01,                    //   LOGICAL_MINIMUM (0x1)
 310:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x26, 0xb7, 0x00,              //   LOGICAL_MAXIMUM (0xb7)
 311:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x19, 0x01,                    //   USAGE_MINIMUM (0x1)
 312:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x29, 0xb7,                    //   USAGE_MAXIMUM (0xb7)
 313:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x75, 0x10,                    //   REPORT_SIZE (16)
 314:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x95, 0x01,                    //   REPORT_COUNT (1)
 315:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x81, 0x00,                    //   INPUT (Data,Array,Abs)
 316:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0xc0,                          // END_COLLECTION
 317:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     /* consumer */
 318:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x05, 0x0c,                    // USAGE_PAGE (Consumer Devices)
 319:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x09, 0x01,                    // USAGE (Consumer Control)
 320:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0xa1, 0x01,                    // COLLECTION (Application)
 321:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x85, REPORT_ID_CONSUMER,      //   REPORT_ID (3)
 322:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x15, 0x01,                    //   LOGICAL_MINIMUM (0x1)
 323:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x26, 0x9c, 0x02,              //   LOGICAL_MAXIMUM (0x29c)
 324:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x19, 0x01,                    //   USAGE_MINIMUM (0x1)
 325:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x2a, 0x9c, 0x02,              //   USAGE_MAXIMUM (0x29c)
 326:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x75, 0x10,                    //   REPORT_SIZE (16)
 327:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x95, 0x01,                    //   REPORT_COUNT (1)
 328:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0x81, 0x00,                    //   INPUT (Data,Array,Abs)
 329:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     0xc0,                          // END_COLLECTION
 330:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 331:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 332:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 333:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define KBD_HID_DESC_NUM                0
 334:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define KBD_HID_DESC_OFFSET             (9+(9+9+7)*KBD_HID_DESC_NUM+9)
 335:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 336:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef MOUSE_ENABLE
 337:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define MOUSE_HID_DESC_NUM           (KBD_HID_DESC_NUM + 1)
 338:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define MOUSE_HID_DESC_OFFSET        (9+(9+9+7)*MOUSE_HID_DESC_NUM+9)
 339:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 340:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define MOUSE_HID_DESC_NUM           (KBD_HID_DESC_NUM + 0)
 341:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 342:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 343:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef CONSOLE_ENABLE
 344:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define DEBUG_HID_DESC_NUM              (MOUSE_HID_DESC_NUM + 1)
 345:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define DEBUG_HID_DESC_OFFSET           (9+(9+9+7)*DEBUG_HID_DESC_NUM+9)
 346:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 347:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define DEBUG_HID_DESC_NUM           (MOUSE_HID_DESC_NUM + 0)
 348:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 349:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 350:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef EXTRAKEY_ENABLE
 351:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define EXTRA_HID_DESC_NUM           (DEBUG_HID_DESC_NUM + 1)
 352:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define EXTRA_HID_DESC_OFFSET        (9+(9+9+7)*EXTRA_HID_DESC_NUM+9)
 353:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 354:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define EXTRA_HID_DESC_NUM           (DEBUG_HID_DESC_NUM + 0)
 355:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 356:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 357:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 358:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define KBD2_HID_DESC_NUM            (EXTRA_HID_DESC_NUM + 1)
 359:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define KBD2_HID_DESC_OFFSET         (9+(9+9+7)*EXTRA_HID_DESC_NUM+9)
 360:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 361:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #   define KBD2_HID_DESC_NUM            (EXTRA_HID_DESC_NUM + 0)
 362:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 363:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 364:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define NUM_INTERFACES                  (KBD2_HID_DESC_NUM + 1)
 365:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define CONFIG1_DESC_SIZE               (9+(9+9+7)*NUM_INTERFACES)
 366:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const uint8_t PROGMEM config1_descriptor[CONFIG1_DESC_SIZE] = {
 367:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// configuration descriptor, USB spec 9.6.3, page 264-266, Table 9-10
 368:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9, 					// bLength;
 369:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	2,					// bDescriptorType;
 370:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	LSB(CONFIG1_DESC_SIZE),			// wTotalLength
 371:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	MSB(CONFIG1_DESC_SIZE),
 372:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	NUM_INTERFACES,				// bNumInterfaces
 373:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bConfigurationValue
 374:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// iConfiguration
 375:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0xA0,					// bmAttributes
 376:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	50,					// bMaxPower
 377:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 378:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 379:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 380:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	4,					// bDescriptorType
 381:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	KBD_INTERFACE,				// bInterfaceNumber
 382:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bAlternateSetting
 383:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumEndpoints
 384:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bInterfaceClass (0x03 = HID)
 385:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x01,					// bInterfaceSubClass (0x01 = Boot)
 386:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x01,					// bInterfaceProtocol (0x01 = Keyboard)
 387:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// iInterface
 388:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// HID descriptor, HID 1.11 spec, section 6.2.1
 389:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 390:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x21,					// bDescriptorType
 391:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x11, 0x01,				// bcdHID
 392:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bCountryCode
 393:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumDescriptors
 394:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x22,					// bDescriptorType
 395:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sizeof(keyboard_hid_report_desc),     	// wDescriptorLength
 396:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,
 397:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 398:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	7,					// bLength
 399:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	5,					// bDescriptorType
 400:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	KBD_ENDPOINT | 0x80,			// bEndpointAddress
 401:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bmAttributes (0x03=intr)
 402:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	KBD_SIZE, 0,				// wMaxPacketSize
 403:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	10,					// bInterval
 404:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 405:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef MOUSE_ENABLE
 406:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 407:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 408:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	4,					// bDescriptorType
 409:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	MOUSE_INTERFACE,			// bInterfaceNumber
 410:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bAlternateSetting
 411:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumEndpoints
 412:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bInterfaceClass (0x03 = HID)
 413:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         // ThinkPad T23 BIOS doesn't work with boot mouse.
 414:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00,					// bInterfaceSubClass (0x01 = Boot)
 415:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00,					// bInterfaceProtocol (0x02 = Mouse)
 416:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /*
 417:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x01,					// bInterfaceSubClass (0x01 = Boot)
 418:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x02,					// bInterfaceProtocol (0x02 = Mouse)
 419:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** */
 420:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// iInterface
 421:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// HID descriptor, HID 1.11 spec, section 6.2.1
 422:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 423:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x21,					// bDescriptorType
 424:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x11, 0x01,				// bcdHID
 425:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bCountryCode
 426:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumDescriptors
 427:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x22,					// bDescriptorType
 428:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sizeof(mouse_hid_report_desc),		// wDescriptorLength
 429:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,
 430:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 431:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	7,					// bLength
 432:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	5,					// bDescriptorType
 433:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	MOUSE_ENDPOINT | 0x80,			// bEndpointAddress
 434:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bmAttributes (0x03=intr)
 435:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	MOUSE_SIZE, 0,				// wMaxPacketSize
 436:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bInterval
 437:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 438:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 439:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef CONSOLE_ENABLE
 440:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 441:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 442:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	4,					// bDescriptorType
 443:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	DEBUG_INTERFACE,			// bInterfaceNumber
 444:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bAlternateSetting
 445:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumEndpoints
 446:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bInterfaceClass (0x03 = HID)
 447:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00,					// bInterfaceSubClass
 448:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00,					// bInterfaceProtocol
 449:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// iInterface
 450:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// HID descriptor, HID 1.11 spec, section 6.2.1
 451:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 452:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x21,					// bDescriptorType
 453:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x11, 0x01,				// bcdHID
 454:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bCountryCode
 455:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumDescriptors
 456:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x22,					// bDescriptorType
 457:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sizeof(debug_hid_report_desc),		// wDescriptorLength
 458:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,
 459:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 460:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	7,					// bLength
 461:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	5,					// bDescriptorType
 462:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	DEBUG_TX_ENDPOINT | 0x80,		// bEndpointAddress
 463:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bmAttributes (0x03=intr)
 464:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	DEBUG_TX_SIZE, 0,			// wMaxPacketSize
 465:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bInterval
 466:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 467:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 468:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef EXTRAKEY_ENABLE
 469:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 470:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 471:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	4,					// bDescriptorType
 472:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	EXTRA_INTERFACE,			// bInterfaceNumber
 473:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bAlternateSetting
 474:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumEndpoints
 475:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bInterfaceClass (0x03 = HID)
 476:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00,					// bInterfaceSubClass
 477:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00,					// bInterfaceProtocol
 478:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// iInterface
 479:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// HID descriptor, HID 1.11 spec, section 6.2.1
 480:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 481:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x21,					// bDescriptorType
 482:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x11, 0x01,				// bcdHID
 483:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bCountryCode
 484:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumDescriptors
 485:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x22,					// bDescriptorType
 486:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sizeof(extra_hid_report_desc),		// wDescriptorLength
 487:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,
 488:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 489:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	7,					// bLength
 490:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	5,					// bDescriptorType
 491:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	EXTRA_ENDPOINT | 0x80,			// bEndpointAddress
 492:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bmAttributes (0x03=intr)
 493:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	EXTRA_SIZE, 0,				// wMaxPacketSize
 494:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	10,					// bInterval
 495:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 496:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 497:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 498:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 499:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 500:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	4,					// bDescriptorType
 501:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	KBD2_INTERFACE,				// bInterfaceNumber
 502:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bAlternateSetting
 503:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumEndpoints
 504:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bInterfaceClass (0x03 = HID)
 505:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00,					// bInterfaceSubClass (0x01 = Boot)
 506:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x00,					// bInterfaceProtocol (0x01 = Keyboard)
 507:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// iInterface
 508:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// HID descriptor, HID 1.11 spec, section 6.2.1
 509:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	9,					// bLength
 510:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x21,					// bDescriptorType
 511:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x11, 0x01,				// bcdHID
 512:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,					// bCountryCode
 513:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bNumDescriptors
 514:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x22,					// bDescriptorType
 515:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sizeof(keyboard2_hid_report_desc),     	// wDescriptorLength
 516:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0,
 517:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 518:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	7,					// bLength
 519:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	5,					// bDescriptorType
 520:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	KBD2_ENDPOINT | 0x80,			// bEndpointAddress
 521:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	0x03,					// bmAttributes (0x03=intr)
 522:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	KBD2_SIZE, 0,				// wMaxPacketSize
 523:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	1,					// bInterval
 524:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 525:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 526:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 527:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // If you're desperate for a little extra code memory, these strings
 528:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // can be completely removed if iManufacturer, iProduct, iSerialNumber
 529:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // in the device desciptor are changed to zeros.
 530:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** struct usb_string_descriptor_struct {
 531:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t bLength;
 532:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t bDescriptorType;
 533:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	int16_t wString[];
 534:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 535:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const struct usb_string_descriptor_struct PROGMEM string0 = {
 536:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	4,
 537:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	3,
 538:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x0409}
 539:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 540:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const struct usb_string_descriptor_struct PROGMEM string1 = {
 541:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sizeof(STR_MANUFACTURER),
 542:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	3,
 543:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	STR_MANUFACTURER
 544:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 545:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const struct usb_string_descriptor_struct PROGMEM string2 = {
 546:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sizeof(STR_PRODUCT),
 547:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	3,
 548:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	STR_PRODUCT
 549:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 550:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 551:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // This table defines which descriptor data is sent for each specific
 552:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // request from the host (in wValue and wIndex).
 553:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static const struct descriptor_list_struct {
 554:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint16_t	wValue;     // descriptor type
 555:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint16_t	wIndex;
 556:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	const uint8_t	*addr;
 557:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t		length;
 558:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** } PROGMEM descriptor_list[] = {
 559:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         // DEVICE descriptor
 560:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x0100, 0x0000, device_descriptor, sizeof(device_descriptor)},
 561:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         // CONFIGURATION descriptor
 562:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x0200, 0x0000, config1_descriptor, sizeof(config1_descriptor)},
 563:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         // HID/REPORT descriptors
 564:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2100, KBD_INTERFACE, config1_descriptor+KBD_HID_DESC_OFFSET, 9},
 565:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2200, KBD_INTERFACE, keyboard_hid_report_desc, sizeof(keyboard_hid_report_desc)},
 566:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef MOUSE_ENABLE
 567:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2100, MOUSE_INTERFACE, config1_descriptor+MOUSE_HID_DESC_OFFSET, 9},
 568:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2200, MOUSE_INTERFACE, mouse_hid_report_desc, sizeof(mouse_hid_report_desc)},
 569:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 570:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef CONSOLE_ENABLE
 571:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2100, DEBUG_INTERFACE, config1_descriptor+DEBUG_HID_DESC_OFFSET, 9},
 572:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2200, DEBUG_INTERFACE, debug_hid_report_desc, sizeof(debug_hid_report_desc)},
 573:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 574:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef EXTRAKEY_ENABLE
 575:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2100, EXTRA_INTERFACE, config1_descriptor+EXTRA_HID_DESC_OFFSET, 9},
 576:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2200, EXTRA_INTERFACE, extra_hid_report_desc, sizeof(extra_hid_report_desc)},
 577:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 578:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 579:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2100, KBD2_INTERFACE, config1_descriptor+KBD2_HID_DESC_OFFSET, 9},
 580:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x2200, KBD2_INTERFACE, keyboard2_hid_report_desc, sizeof(keyboard2_hid_report_desc)},
 581:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 582:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         // STRING descriptors
 583:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x0300, 0x0000, (const uint8_t *)&string0, 4},
 584:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x0301, 0x0409, (const uint8_t *)&string1, sizeof(STR_MANUFACTURER)},
 585:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	{0x0302, 0x0409, (const uint8_t *)&string2, sizeof(STR_PRODUCT)}
 586:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** };
 587:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #define NUM_DESC_LIST (sizeof(descriptor_list)/sizeof(struct descriptor_list_struct))
 588:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 589:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 590:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /**************************************************************************
 591:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
 592:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *  Variables - these are the only non-stack RAM usage
 593:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
 594:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  **************************************************************************/
 595:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 596:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // zero when we are not configured, non-zero when enumerated
 597:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static volatile uint8_t usb_configuration=0;
 598:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 599:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 600:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /**************************************************************************
 601:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
 602:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *  Public Functions - these are the API intended for the user
 603:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
 604:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  **************************************************************************/
 605:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 606:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 607:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // initialize USB
 608:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** void usb_init(void)
 609:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 610:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	HW_CONFIG();
 611:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	USB_FREEZE();				// enable USB
 612:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	PLL_CONFIG();				// config PLL
 613:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 614:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         USB_CONFIG();				// start USB clock
 615:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UDCON = 0;				// enable attach resistor
 616:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	usb_configuration = 0;
 617:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         suspend = false;
 618:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE)|(1<<WAKEUPE);
 619:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sei();
 620:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 621:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 622:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // return 0 if the USB is not configured, or the configuration
 623:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // number selected by the HOST
 624:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** uint8_t usb_configured(void)
 625:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 626:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	return usb_configuration && !suspend;
 627:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 628:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 629:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** void usb_remote_wakeup(void)
 630:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 631:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     UDCON |= (1<<RMWKUP);
 632:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     while (UDCON & (1<<RMWKUP));
 633:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 634:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 635:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 636:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 637:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /**************************************************************************
 638:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
 639:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *  Private Functions - not intended for general user consumption....
 640:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  *
 641:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****  **************************************************************************/
 642:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 643:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 644:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 645:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // USB Device Interrupt - handle all device-level events
 646:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // the transmit buffer flushing is triggered by the start of frame
 647:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** //
 648:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** ISR(USB_GEN_vect)
 649:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 650:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t intbits, t;
 651:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	static uint8_t div4=0;
 652:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 653:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         intbits = UDINT;
 654:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UDINT = 0;
 655:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         if ((intbits & (1<<SUSPI)) && (UDIEN & (1<<SUSPE)) && usb_configuration) {
 656:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
 657:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             sleep_led_enable();
 658:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 659:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             UDIEN &= ~(1<<SUSPE);
 660:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             UDIEN |= (1<<WAKEUPE);
 661:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend = true;
 662:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 663:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         if ((intbits & (1<<WAKEUPI)) && (UDIEN & (1<<WAKEUPE)) && usb_configuration) {
 664:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend_wakeup_init();
 665:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
 666:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             sleep_led_disable();
 667:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             // NOTE: converters may not accept this
 668:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             led_set(host_keyboard_leds());
 669:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 670:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 671:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             UDIEN |= (1<<SUSPE);
 672:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             UDIEN &= ~(1<<WAKEUPE);
 673:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend = false;
 674:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 675:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         if (intbits & (1<<EORSTI)) {
 676:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UENUM = 0;
 677:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECONX = 1;
 678:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECFG0X = EP_TYPE_CONTROL;
 679:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 680:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UEIENX = (1<<RXSTPE);
 681:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		usb_configuration = 0;
 682:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 683:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	if ((intbits & (1<<SOFI)) && usb_configuration) {
 684:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		t = debug_flush_timer;
 685:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (t) {
 686:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			debug_flush_timer = -- t;
 687:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (!t) {
 688:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = DEBUG_TX_ENDPOINT;
 689:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				while ((UEINTX & (1<<RWAL))) {
 690:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 691:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 692:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UEINTX = 0x3A;
 693:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 694:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 695:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 /* TODO: should keep IDLE rate on each keyboard interface */
 696:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 697:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (!keyboard_nkro && keyboard_idle && (++div4 & 3) == 0) {
 698:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #else
 699:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (keyboard_idle && (++div4 & 3) == 0) {
 700:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 701:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UENUM = KBD_ENDPOINT;
 702:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (UEINTX & (1<<RWAL)) {
 703:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_keyboard_idle_count++;
 704:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (usb_keyboard_idle_count == keyboard_idle) {
 705:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_keyboard_idle_count = 0;
 706:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                         /* TODO: fix keyboard_report inconsistency */
 707:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** /* To avoid Mac SET_IDLE behaviour.
 708:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = keyboard_report_prev->mods;
 709:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 710:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                         uint8_t keys = keyboard_protocol ? KBD_REPORT_KEYS : 6;
 711:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					for (uint8_t i=0; i<keys; i++) {
 712:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = keyboard_report_prev->keys[i];
 713:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					}
 714:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEINTX = 0x3A;
 715:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** */
 716:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 717:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 718:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 719:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	}
 720:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 721:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 722:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 723:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 724:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // Misc functions to wait for ready and send/receive packets
 725:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static inline void usb_wait_in_ready(void)
 726:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
  16               		.loc 1 726 1 view -0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.L2:
 727:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	while (!(UEINTX & (1<<TXINI))) ;
  23               		.loc 1 727 9 discriminator 1 view .LVU1
  24               		.loc 1 727 11 is_stmt 0 discriminator 1 view .LVU2
  25 0000 8091 E800 		lds r24,232
  26               		.loc 1 727 9 discriminator 1 view .LVU3
  27 0004 80FF      		sbrs r24,0
  28 0006 00C0      		rjmp .L2
  29               	/* epilogue start */
 728:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
  30               		.loc 1 728 1 view .LVU4
  31 0008 0895      		ret
  32               		.cfi_endproc
  33               	.LFE8:
  35               		.section	.text.usb_init,"ax",@progbits
  36               	.global	usb_init
  38               	usb_init:
  39               	.LFB4:
 609:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	HW_CONFIG();
  40               		.loc 1 609 1 is_stmt 1 view -0
  41               		.cfi_startproc
  42               	/* prologue: function */
  43               	/* frame size = 0 */
  44               	/* stack size = 0 */
  45               	.L__stack_usage = 0
 610:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	USB_FREEZE();				// enable USB
  46               		.loc 1 610 2 view .LVU6
  47 0000 81E8      		ldi r24,lo8(-127)
  48 0002 8093 D700 		sts 215,r24
 611:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	PLL_CONFIG();				// config PLL
  49               		.loc 1 611 2 view .LVU7
  50 0006 80EA      		ldi r24,lo8(-96)
  51 0008 8093 D800 		sts 216,r24
 612:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
  52               		.loc 1 612 2 view .LVU8
  53 000c 86E1      		ldi r24,lo8(22)
  54 000e 89BD      		out 0x29,r24
 613:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         USB_CONFIG();				// start USB clock
  55               		.loc 1 613 9 view .LVU9
  56               	.L6:
 613:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         USB_CONFIG();				// start USB clock
  57               		.loc 1 613 16 discriminator 1 view .LVU10
  58 0010 09B4      		in __tmp_reg__,0x29
  59 0012 00FE      		sbrs __tmp_reg__,0
  60 0014 00C0      		rjmp .L6
 614:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UDCON = 0;				// enable attach resistor
  61               		.loc 1 614 9 view .LVU11
  62 0016 80E9      		ldi r24,lo8(-112)
  63 0018 8093 D800 		sts 216,r24
 615:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	usb_configuration = 0;
  64               		.loc 1 615 9 view .LVU12
 615:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	usb_configuration = 0;
  65               		.loc 1 615 15 is_stmt 0 view .LVU13
  66 001c 1092 E000 		sts 224,__zero_reg__
 616:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         suspend = false;
  67               		.loc 1 616 2 is_stmt 1 view .LVU14
 616:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         suspend = false;
  68               		.loc 1 616 20 is_stmt 0 view .LVU15
  69 0020 1092 0000 		sts usb_configuration,__zero_reg__
 617:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE)|(1<<WAKEUPE);
  70               		.loc 1 617 9 is_stmt 1 view .LVU16
 617:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE)|(1<<WAKEUPE);
  71               		.loc 1 617 17 is_stmt 0 view .LVU17
  72 0024 1092 0000 		sts suspend,__zero_reg__
 618:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sei();
  73               		.loc 1 618 9 is_stmt 1 view .LVU18
 618:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	sei();
  74               		.loc 1 618 15 is_stmt 0 view .LVU19
  75 0028 8DE1      		ldi r24,lo8(29)
  76 002a 8093 E200 		sts 226,r24
 619:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
  77               		.loc 1 619 2 is_stmt 1 view .LVU20
  78               	/* #APP */
  79               	 ;  619 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
  80 002e 7894      		sei
  81               	 ;  0 "" 2
  82               	/* #NOAPP */
  83               	/* epilogue start */
 620:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
  84               		.loc 1 620 1 is_stmt 0 view .LVU21
  85 0030 0895      		ret
  86               		.cfi_endproc
  87               	.LFE4:
  89               		.section	.text.usb_configured,"ax",@progbits
  90               	.global	usb_configured
  92               	usb_configured:
  93               	.LFB5:
 625:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	return usb_configuration && !suspend;
  94               		.loc 1 625 1 is_stmt 1 view -0
  95               		.cfi_startproc
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
 626:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 100               		.loc 1 626 2 view .LVU23
 626:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 101               		.loc 1 626 9 is_stmt 0 view .LVU24
 102 0000 8091 0000 		lds r24,usb_configuration
 626:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 103               		.loc 1 626 27 view .LVU25
 104 0004 8823      		tst r24
 105 0006 01F0      		breq .L11
 626:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 106               		.loc 1 626 27 discriminator 1 view .LVU26
 107 0008 8091 0000 		lds r24,suspend
 108 000c 91E0      		ldi r25,lo8(1)
 109 000e 8927      		eor r24,r25
 110 0010 0895      		ret
 111               	.L11:
 626:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 112               		.loc 1 626 27 view .LVU27
 113 0012 80E0      		ldi r24,0
 114               	/* epilogue start */
 627:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 115               		.loc 1 627 1 view .LVU28
 116 0014 0895      		ret
 117               		.cfi_endproc
 118               	.LFE5:
 120               		.section	.text.usb_remote_wakeup,"ax",@progbits
 121               	.global	usb_remote_wakeup
 123               	usb_remote_wakeup:
 124               	.LFB6:
 630:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     UDCON |= (1<<RMWKUP);
 125               		.loc 1 630 1 is_stmt 1 view -0
 126               		.cfi_startproc
 127               	/* prologue: function */
 128               	/* frame size = 0 */
 129               	/* stack size = 0 */
 130               	.L__stack_usage = 0
 631:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     while (UDCON & (1<<RMWKUP));
 131               		.loc 1 631 5 view .LVU30
 631:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****     while (UDCON & (1<<RMWKUP));
 132               		.loc 1 631 11 is_stmt 0 view .LVU31
 133 0000 8091 E000 		lds r24,224
 134 0004 8260      		ori r24,lo8(2)
 135 0006 8093 E000 		sts 224,r24
 632:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 136               		.loc 1 632 5 is_stmt 1 view .LVU32
 137               	.L13:
 632:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 138               		.loc 1 632 12 discriminator 1 view .LVU33
 139 000a 8091 E000 		lds r24,224
 140 000e 81FD      		sbrc r24,1
 141 0010 00C0      		rjmp .L13
 142               	/* epilogue start */
 633:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 143               		.loc 1 633 1 is_stmt 0 view .LVU34
 144 0012 0895      		ret
 145               		.cfi_endproc
 146               	.LFE6:
 148               		.section	.text.__vector_10,"ax",@progbits
 149               	.global	__vector_10
 151               	__vector_10:
 152               	.LFB7:
 649:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t intbits, t;
 153               		.loc 1 649 1 is_stmt 1 view -0
 154               		.cfi_startproc
 155 0000 1F92      		push r1
 156               	.LCFI0:
 157               		.cfi_def_cfa_offset 3
 158               		.cfi_offset 1, -2
 159 0002 0F92      		push r0
 160               	.LCFI1:
 161               		.cfi_def_cfa_offset 4
 162               		.cfi_offset 0, -3
 163 0004 0FB6      		in r0,__SREG__
 164 0006 0F92      		push r0
 165 0008 1124      		clr __zero_reg__
 166 000a 0BB6      		in r0,__RAMPZ__
 167 000c 0F92      		push r0
 168 000e 2F93      		push r18
 169               	.LCFI2:
 170               		.cfi_def_cfa_offset 5
 171               		.cfi_offset 18, -4
 172 0010 3F93      		push r19
 173               	.LCFI3:
 174               		.cfi_def_cfa_offset 6
 175               		.cfi_offset 19, -5
 176 0012 4F93      		push r20
 177               	.LCFI4:
 178               		.cfi_def_cfa_offset 7
 179               		.cfi_offset 20, -6
 180 0014 5F93      		push r21
 181               	.LCFI5:
 182               		.cfi_def_cfa_offset 8
 183               		.cfi_offset 21, -7
 184 0016 6F93      		push r22
 185               	.LCFI6:
 186               		.cfi_def_cfa_offset 9
 187               		.cfi_offset 22, -8
 188 0018 7F93      		push r23
 189               	.LCFI7:
 190               		.cfi_def_cfa_offset 10
 191               		.cfi_offset 23, -9
 192 001a 8F93      		push r24
 193               	.LCFI8:
 194               		.cfi_def_cfa_offset 11
 195               		.cfi_offset 24, -10
 196 001c 9F93      		push r25
 197               	.LCFI9:
 198               		.cfi_def_cfa_offset 12
 199               		.cfi_offset 25, -11
 200 001e AF93      		push r26
 201               	.LCFI10:
 202               		.cfi_def_cfa_offset 13
 203               		.cfi_offset 26, -12
 204 0020 BF93      		push r27
 205               	.LCFI11:
 206               		.cfi_def_cfa_offset 14
 207               		.cfi_offset 27, -13
 208 0022 CF93      		push r28
 209               	.LCFI12:
 210               		.cfi_def_cfa_offset 15
 211               		.cfi_offset 28, -14
 212 0024 EF93      		push r30
 213               	.LCFI13:
 214               		.cfi_def_cfa_offset 16
 215               		.cfi_offset 30, -15
 216 0026 FF93      		push r31
 217               	.LCFI14:
 218               		.cfi_def_cfa_offset 17
 219               		.cfi_offset 31, -16
 220               	/* prologue: Signal */
 221               	/* frame size = 0 */
 222               	/* stack size = 17 */
 223               	.L__stack_usage = 17
 650:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	static uint8_t div4=0;
 224               		.loc 1 650 2 view .LVU36
 651:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 225               		.loc 1 651 2 view .LVU37
 653:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UDINT = 0;
 226               		.loc 1 653 9 view .LVU38
 653:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UDINT = 0;
 227               		.loc 1 653 17 is_stmt 0 view .LVU39
 228 0028 C091 E100 		lds r28,225
 229               	.LVL0:
 654:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         if ((intbits & (1<<SUSPI)) && (UDIEN & (1<<SUSPE)) && usb_configuration) {
 230               		.loc 1 654 9 is_stmt 1 view .LVU40
 654:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         if ((intbits & (1<<SUSPI)) && (UDIEN & (1<<SUSPE)) && usb_configuration) {
 231               		.loc 1 654 15 is_stmt 0 view .LVU41
 232 002c 1092 E100 		sts 225,__zero_reg__
 655:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
 233               		.loc 1 655 9 is_stmt 1 view .LVU42
 655:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
 234               		.loc 1 655 12 is_stmt 0 view .LVU43
 235 0030 C0FF      		sbrs r28,0
 236 0032 00C0      		rjmp .L16
 655:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
 237               		.loc 1 655 40 discriminator 1 view .LVU44
 238 0034 8091 E200 		lds r24,226
 655:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
 239               		.loc 1 655 36 discriminator 1 view .LVU45
 240 0038 80FF      		sbrs r24,0
 241 003a 00C0      		rjmp .L16
 655:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
 242               		.loc 1 655 60 discriminator 2 view .LVU46
 243 003c 8091 0000 		lds r24,usb_configuration
 244 0040 8823      		tst r24
 245 0042 01F0      		breq .L16
 659:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             UDIEN |= (1<<WAKEUPE);
 246               		.loc 1 659 13 is_stmt 1 view .LVU47
 659:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             UDIEN |= (1<<WAKEUPE);
 247               		.loc 1 659 19 is_stmt 0 view .LVU48
 248 0044 8091 E200 		lds r24,226
 249 0048 8E7F      		andi r24,lo8(-2)
 250 004a 8093 E200 		sts 226,r24
 660:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend = true;
 251               		.loc 1 660 13 is_stmt 1 view .LVU49
 660:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend = true;
 252               		.loc 1 660 19 is_stmt 0 view .LVU50
 253 004e 8091 E200 		lds r24,226
 254 0052 8061      		ori r24,lo8(16)
 255 0054 8093 E200 		sts 226,r24
 661:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 256               		.loc 1 661 13 is_stmt 1 view .LVU51
 661:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 257               		.loc 1 661 21 is_stmt 0 view .LVU52
 258 0058 81E0      		ldi r24,lo8(1)
 259 005a 8093 0000 		sts suspend,r24
 260               	.L16:
 663:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend_wakeup_init();
 261               		.loc 1 663 9 is_stmt 1 view .LVU53
 663:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend_wakeup_init();
 262               		.loc 1 663 12 is_stmt 0 view .LVU54
 263 005e C4FF      		sbrs r28,4
 264 0060 00C0      		rjmp .L17
 663:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend_wakeup_init();
 265               		.loc 1 663 42 discriminator 1 view .LVU55
 266 0062 8091 E200 		lds r24,226
 663:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend_wakeup_init();
 267               		.loc 1 663 38 discriminator 1 view .LVU56
 268 0066 84FF      		sbrs r24,4
 269 0068 00C0      		rjmp .L17
 663:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend_wakeup_init();
 270               		.loc 1 663 64 discriminator 2 view .LVU57
 271 006a 8091 0000 		lds r24,usb_configuration
 272 006e 8823      		tst r24
 273 0070 01F0      		breq .L17
 664:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SLEEP_LED_ENABLE
 274               		.loc 1 664 13 is_stmt 1 view .LVU58
 275 0072 0E94 0000 		call suspend_wakeup_init
 276               	.LVL1:
 671:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             UDIEN &= ~(1<<WAKEUPE);
 277               		.loc 1 671 13 view .LVU59
 671:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             UDIEN &= ~(1<<WAKEUPE);
 278               		.loc 1 671 19 is_stmt 0 view .LVU60
 279 0076 8091 E200 		lds r24,226
 280 007a 8160      		ori r24,lo8(1)
 281 007c 8093 E200 		sts 226,r24
 672:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend = false;
 282               		.loc 1 672 13 is_stmt 1 view .LVU61
 672:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****             suspend = false;
 283               		.loc 1 672 19 is_stmt 0 view .LVU62
 284 0080 8091 E200 		lds r24,226
 285 0084 8F7E      		andi r24,lo8(-17)
 286 0086 8093 E200 		sts 226,r24
 673:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 287               		.loc 1 673 13 is_stmt 1 view .LVU63
 673:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 288               		.loc 1 673 21 is_stmt 0 view .LVU64
 289 008a 1092 0000 		sts suspend,__zero_reg__
 290               	.L17:
 675:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UENUM = 0;
 291               		.loc 1 675 9 is_stmt 1 view .LVU65
 675:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UENUM = 0;
 292               		.loc 1 675 12 is_stmt 0 view .LVU66
 293 008e C3FF      		sbrs r28,3
 294 0090 00C0      		rjmp .L18
 676:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECONX = 1;
 295               		.loc 1 676 3 is_stmt 1 view .LVU67
 676:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECONX = 1;
 296               		.loc 1 676 9 is_stmt 0 view .LVU68
 297 0092 1092 E900 		sts 233,__zero_reg__
 677:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECFG0X = EP_TYPE_CONTROL;
 298               		.loc 1 677 3 is_stmt 1 view .LVU69
 677:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECFG0X = EP_TYPE_CONTROL;
 299               		.loc 1 677 10 is_stmt 0 view .LVU70
 300 0096 81E0      		ldi r24,lo8(1)
 301 0098 8093 EB00 		sts 235,r24
 678:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 302               		.loc 1 678 3 is_stmt 1 view .LVU71
 678:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 303               		.loc 1 678 11 is_stmt 0 view .LVU72
 304 009c 1092 EC00 		sts 236,__zero_reg__
 679:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UEIENX = (1<<RXSTPE);
 305               		.loc 1 679 3 is_stmt 1 view .LVU73
 679:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		UEIENX = (1<<RXSTPE);
 306               		.loc 1 679 11 is_stmt 0 view .LVU74
 307 00a0 82E2      		ldi r24,lo8(34)
 308 00a2 8093 ED00 		sts 237,r24
 680:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		usb_configuration = 0;
 309               		.loc 1 680 3 is_stmt 1 view .LVU75
 680:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		usb_configuration = 0;
 310               		.loc 1 680 10 is_stmt 0 view .LVU76
 311 00a6 88E0      		ldi r24,lo8(8)
 312 00a8 8093 F000 		sts 240,r24
 681:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 313               		.loc 1 681 3 is_stmt 1 view .LVU77
 681:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         }
 314               		.loc 1 681 21 is_stmt 0 view .LVU78
 315 00ac 1092 0000 		sts usb_configuration,__zero_reg__
 316               	.L18:
 683:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		t = debug_flush_timer;
 317               		.loc 1 683 2 is_stmt 1 view .LVU79
 683:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		t = debug_flush_timer;
 318               		.loc 1 683 5 is_stmt 0 view .LVU80
 319 00b0 C2FF      		sbrs r28,2
 320 00b2 00C0      		rjmp .L15
 683:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		t = debug_flush_timer;
 321               		.loc 1 683 28 discriminator 1 view .LVU81
 322 00b4 8091 0000 		lds r24,usb_configuration
 323 00b8 8823      		tst r24
 324 00ba 01F0      		breq .L15
 684:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (t) {
 325               		.loc 1 684 3 is_stmt 1 view .LVU82
 684:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (t) {
 326               		.loc 1 684 5 is_stmt 0 view .LVU83
 327 00bc 8091 0000 		lds r24,debug_flush_timer
 328               	.LVL2:
 685:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			debug_flush_timer = -- t;
 329               		.loc 1 685 3 is_stmt 1 view .LVU84
 685:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			debug_flush_timer = -- t;
 330               		.loc 1 685 6 is_stmt 0 view .LVU85
 331 00c0 8823      		tst r24
 332 00c2 01F0      		breq .L23
 686:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (!t) {
 333               		.loc 1 686 4 is_stmt 1 view .LVU86
 686:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (!t) {
 334               		.loc 1 686 22 is_stmt 0 view .LVU87
 335 00c4 8150      		subi r24,lo8(-(-1))
 336               	.LVL3:
 686:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (!t) {
 337               		.loc 1 686 22 view .LVU88
 338 00c6 8093 0000 		sts debug_flush_timer,r24
 687:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = DEBUG_TX_ENDPOINT;
 339               		.loc 1 687 4 is_stmt 1 view .LVU89
 687:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = DEBUG_TX_ENDPOINT;
 340               		.loc 1 687 7 is_stmt 0 view .LVU90
 341 00ca 8111      		cpse r24,__zero_reg__
 342 00cc 00C0      		rjmp .L23
 688:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				while ((UEINTX & (1<<RWAL))) {
 343               		.loc 1 688 5 is_stmt 1 view .LVU91
 688:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				while ((UEINTX & (1<<RWAL))) {
 344               		.loc 1 688 11 is_stmt 0 view .LVU92
 345 00ce 83E0      		ldi r24,lo8(3)
 346               	.LVL4:
 688:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				while ((UEINTX & (1<<RWAL))) {
 347               		.loc 1 688 11 view .LVU93
 348 00d0 8093 E900 		sts 233,r24
 349               	.LVL5:
 689:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 350               		.loc 1 689 5 is_stmt 1 view .LVU94
 351               	.L25:
 689:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 352               		.loc 1 689 12 view .LVU95
 689:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 353               		.loc 1 689 13 is_stmt 0 view .LVU96
 354 00d4 8091 E800 		lds r24,232
 689:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 355               		.loc 1 689 12 view .LVU97
 356 00d8 85FD      		sbrc r24,5
 357 00da 00C0      		rjmp .L26
 692:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 358               		.loc 1 692 5 is_stmt 1 view .LVU98
 692:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 359               		.loc 1 692 12 is_stmt 0 view .LVU99
 360 00dc 8AE3      		ldi r24,lo8(58)
 361 00de 8093 E800 		sts 232,r24
 362               	.L23:
 699:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 363               		.loc 1 699 3 is_stmt 1 view .LVU100
 699:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 364               		.loc 1 699 6 is_stmt 0 view .LVU101
 365 00e2 8091 0000 		lds r24,keyboard_idle
 366 00e6 8823      		tst r24
 367 00e8 01F0      		breq .L15
 699:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 368               		.loc 1 699 25 discriminator 1 view .LVU102
 369 00ea 8091 0000 		lds r24,div4.0
 370 00ee 8F5F      		subi r24,lo8(-(1))
 699:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 371               		.loc 1 699 21 discriminator 1 view .LVU103
 372 00f0 8093 0000 		sts div4.0,r24
 373 00f4 8370      		andi r24,lo8(3)
 374 00f6 01F4      		brne .L15
 701:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (UEINTX & (1<<RWAL)) {
 375               		.loc 1 701 4 is_stmt 1 view .LVU104
 701:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (UEINTX & (1<<RWAL)) {
 376               		.loc 1 701 10 is_stmt 0 view .LVU105
 377 00f8 81E0      		ldi r24,lo8(1)
 378 00fa 8093 E900 		sts 233,r24
 702:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_keyboard_idle_count++;
 379               		.loc 1 702 4 is_stmt 1 view .LVU106
 702:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_keyboard_idle_count++;
 380               		.loc 1 702 8 is_stmt 0 view .LVU107
 381 00fe 8091 E800 		lds r24,232
 702:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_keyboard_idle_count++;
 382               		.loc 1 702 7 view .LVU108
 383 0102 85FF      		sbrs r24,5
 384 0104 00C0      		rjmp .L15
 703:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (usb_keyboard_idle_count == keyboard_idle) {
 385               		.loc 1 703 5 is_stmt 1 view .LVU109
 703:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (usb_keyboard_idle_count == keyboard_idle) {
 386               		.loc 1 703 28 is_stmt 0 view .LVU110
 387 0106 8091 0000 		lds r24,usb_keyboard_idle_count
 388 010a 8F5F      		subi r24,lo8(-(1))
 389 010c 8093 0000 		sts usb_keyboard_idle_count,r24
 704:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_keyboard_idle_count = 0;
 390               		.loc 1 704 5 is_stmt 1 view .LVU111
 704:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_keyboard_idle_count = 0;
 391               		.loc 1 704 8 is_stmt 0 view .LVU112
 392 0110 9091 0000 		lds r25,keyboard_idle
 393 0114 8913      		cpse r24,r25
 394 0116 00C0      		rjmp .L15
 705:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                         /* TODO: fix keyboard_report inconsistency */
 395               		.loc 1 705 6 is_stmt 1 view .LVU113
 705:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                         /* TODO: fix keyboard_report inconsistency */
 396               		.loc 1 705 30 is_stmt 0 view .LVU114
 397 0118 1092 0000 		sts usb_keyboard_idle_count,__zero_reg__
 398               	.L15:
 399               	/* epilogue start */
 720:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 400               		.loc 1 720 1 view .LVU115
 401 011c FF91      		pop r31
 402 011e EF91      		pop r30
 403 0120 CF91      		pop r28
 404               	.LVL6:
 720:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 405               		.loc 1 720 1 view .LVU116
 406 0122 BF91      		pop r27
 407 0124 AF91      		pop r26
 408 0126 9F91      		pop r25
 409 0128 8F91      		pop r24
 410 012a 7F91      		pop r23
 411 012c 6F91      		pop r22
 412 012e 5F91      		pop r21
 413 0130 4F91      		pop r20
 414 0132 3F91      		pop r19
 415 0134 2F91      		pop r18
 416 0136 0F90      		pop r0
 417 0138 0BBE      		out __RAMPZ__,r0
 418 013a 0F90      		pop r0
 419 013c 0FBE      		out __SREG__,r0
 420 013e 0F90      		pop r0
 421 0140 1F90      		pop r1
 422 0142 1895      		reti
 423               	.LVL7:
 424               	.L26:
 690:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 425               		.loc 1 690 6 is_stmt 1 view .LVU117
 690:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 426               		.loc 1 690 13 is_stmt 0 view .LVU118
 427 0144 1092 F100 		sts 241,__zero_reg__
 428 0148 00C0      		rjmp .L25
 429               		.cfi_endproc
 430               	.LFE7:
 432               		.section	.text.__vector_11,"ax",@progbits
 433               	.global	__vector_11
 435               	__vector_11:
 436               	.LFB12:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static inline void usb_send_in(void)
 730:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	UEINTX = ~(1<<TXINI);
 732:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 733:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static inline void usb_wait_receive_out(void)
 734:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 735:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 736:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 737:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** static inline void usb_ack_out(void)
 738:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 739:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	UEINTX = ~(1<<RXOUTI);
 740:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 741:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 742:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 743:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 744:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // USB Endpoint Interrupt - endpoint 0 is handled here.  The
 745:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // other endpoints are manipulated by the user-callable
 746:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** // functions, and the start-of-frame interrupt.
 747:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** //
 748:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** ISR(USB_COM_vect)
 749:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 437               		.loc 1 749 1 is_stmt 1 view -0
 438               		.cfi_startproc
 439 0000 1F92      		push r1
 440               	.LCFI15:
 441               		.cfi_def_cfa_offset 3
 442               		.cfi_offset 1, -2
 443 0002 0F92      		push r0
 444               	.LCFI16:
 445               		.cfi_def_cfa_offset 4
 446               		.cfi_offset 0, -3
 447 0004 0FB6      		in r0,__SREG__
 448 0006 0F92      		push r0
 449 0008 1124      		clr __zero_reg__
 450 000a 0BB6      		in r0,__RAMPZ__
 451 000c 0F92      		push r0
 452 000e EF92      		push r14
 453               	.LCFI17:
 454               		.cfi_def_cfa_offset 5
 455               		.cfi_offset 14, -4
 456 0010 FF92      		push r15
 457               	.LCFI18:
 458               		.cfi_def_cfa_offset 6
 459               		.cfi_offset 15, -5
 460 0012 0F93      		push r16
 461               	.LCFI19:
 462               		.cfi_def_cfa_offset 7
 463               		.cfi_offset 16, -6
 464 0014 1F93      		push r17
 465               	.LCFI20:
 466               		.cfi_def_cfa_offset 8
 467               		.cfi_offset 17, -7
 468 0016 2F93      		push r18
 469               	.LCFI21:
 470               		.cfi_def_cfa_offset 9
 471               		.cfi_offset 18, -8
 472 0018 3F93      		push r19
 473               	.LCFI22:
 474               		.cfi_def_cfa_offset 10
 475               		.cfi_offset 19, -9
 476 001a 4F93      		push r20
 477               	.LCFI23:
 478               		.cfi_def_cfa_offset 11
 479               		.cfi_offset 20, -10
 480 001c 5F93      		push r21
 481               	.LCFI24:
 482               		.cfi_def_cfa_offset 12
 483               		.cfi_offset 21, -11
 484 001e 6F93      		push r22
 485               	.LCFI25:
 486               		.cfi_def_cfa_offset 13
 487               		.cfi_offset 22, -12
 488 0020 7F93      		push r23
 489               	.LCFI26:
 490               		.cfi_def_cfa_offset 14
 491               		.cfi_offset 23, -13
 492 0022 8F93      		push r24
 493               	.LCFI27:
 494               		.cfi_def_cfa_offset 15
 495               		.cfi_offset 24, -14
 496 0024 9F93      		push r25
 497               	.LCFI28:
 498               		.cfi_def_cfa_offset 16
 499               		.cfi_offset 25, -15
 500 0026 AF93      		push r26
 501               	.LCFI29:
 502               		.cfi_def_cfa_offset 17
 503               		.cfi_offset 26, -16
 504 0028 BF93      		push r27
 505               	.LCFI30:
 506               		.cfi_def_cfa_offset 18
 507               		.cfi_offset 27, -17
 508 002a CF93      		push r28
 509               	.LCFI31:
 510               		.cfi_def_cfa_offset 19
 511               		.cfi_offset 28, -18
 512 002c DF93      		push r29
 513               	.LCFI32:
 514               		.cfi_def_cfa_offset 20
 515               		.cfi_offset 29, -19
 516 002e EF93      		push r30
 517               	.LCFI33:
 518               		.cfi_def_cfa_offset 21
 519               		.cfi_offset 30, -20
 520 0030 FF93      		push r31
 521               	.LCFI34:
 522               		.cfi_def_cfa_offset 22
 523               		.cfi_offset 31, -21
 524               	/* prologue: Signal */
 525               	/* frame size = 0 */
 526               	/* stack size = 22 */
 527               	.L__stack_usage = 22
 750:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         uint8_t intbits;
 528               		.loc 1 750 9 view .LVU120
 751:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	const uint8_t *list;
 529               		.loc 1 751 2 view .LVU121
 752:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         const uint8_t *cfg;
 530               		.loc 1 752 9 view .LVU122
 753:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t i, n, len, en;
 531               		.loc 1 753 2 view .LVU123
 754:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t bmRequestType;
 532               		.loc 1 754 2 view .LVU124
 755:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t bRequest;
 533               		.loc 1 755 2 view .LVU125
 756:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint16_t wValue;
 534               		.loc 1 756 2 view .LVU126
 757:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint16_t wIndex;
 535               		.loc 1 757 2 view .LVU127
 758:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint16_t wLength;
 536               		.loc 1 758 2 view .LVU128
 759:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint16_t desc_val;
 537               		.loc 1 759 2 view .LVU129
 760:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	const uint8_t *desc_addr;
 538               		.loc 1 760 2 view .LVU130
 761:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	uint8_t	desc_length;
 539               		.loc 1 761 2 view .LVU131
 762:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 763:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         UENUM = 0;
 540               		.loc 1 763 9 view .LVU132
 541               		.loc 1 763 15 is_stmt 0 view .LVU133
 542 0032 1092 E900 		sts 233,__zero_reg__
 764:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	intbits = UEINTX;
 543               		.loc 1 764 2 is_stmt 1 view .LVU134
 544               		.loc 1 764 10 is_stmt 0 view .LVU135
 545 0036 8091 E800 		lds r24,232
 546               	.LVL8:
 765:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         if (intbits & (1<<RXSTPI)) {
 547               		.loc 1 765 9 is_stmt 1 view .LVU136
 548               		.loc 1 765 12 is_stmt 0 view .LVU137
 549 003a 83FF      		sbrs r24,3
 550 003c 00C0      		rjmp .L58
 766:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 bmRequestType = UEDATX;
 551               		.loc 1 766 17 is_stmt 1 view .LVU138
 552               		.loc 1 766 31 is_stmt 0 view .LVU139
 553 003e D091 F100 		lds r29,241
 554               	.LVL9:
 767:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 bRequest = UEDATX;
 555               		.loc 1 767 17 is_stmt 1 view .LVU140
 556               		.loc 1 767 26 is_stmt 0 view .LVU141
 557 0042 C091 F100 		lds r28,241
 558               	.LVL10:
 768:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 wValue = UEDATX;
 559               		.loc 1 768 17 is_stmt 1 view .LVU142
 560               		.loc 1 768 26 is_stmt 0 view .LVU143
 561 0046 E090 F100 		lds r14,241
 562               	.LVL11:
 769:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 wValue |= (UEDATX << 8);
 563               		.loc 1 769 17 is_stmt 1 view .LVU144
 564               		.loc 1 769 28 is_stmt 0 view .LVU145
 565 004a 8091 F100 		lds r24,241
 566               	.LVL12:
 567               		.loc 1 769 24 view .LVU146
 568 004e F82E      		mov r15,r24
 569               	.LVL13:
 770:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 wIndex = UEDATX;
 570               		.loc 1 770 17 is_stmt 1 view .LVU147
 571               		.loc 1 770 26 is_stmt 0 view .LVU148
 572 0050 0091 F100 		lds r16,241
 573               	.LVL14:
 771:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 wIndex |= (UEDATX << 8);
 574               		.loc 1 771 17 is_stmt 1 view .LVU149
 575               		.loc 1 771 28 is_stmt 0 view .LVU150
 576 0054 8091 F100 		lds r24,241
 577               		.loc 1 771 24 view .LVU151
 578 0058 182F      		mov r17,r24
 579               	.LVL15:
 772:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 wLength = UEDATX;
 580               		.loc 1 772 17 is_stmt 1 view .LVU152
 581               		.loc 1 772 27 is_stmt 0 view .LVU153
 582 005a 8091 F100 		lds r24,241
 583               	.LVL16:
 773:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 wLength |= (UEDATX << 8);
 584               		.loc 1 773 17 is_stmt 1 view .LVU154
 585               		.loc 1 773 29 is_stmt 0 view .LVU155
 586 005e 9091 F100 		lds r25,241
 587               	.LVL17:
 774:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 588               		.loc 1 774 17 is_stmt 1 view .LVU156
 589               		.loc 1 774 24 is_stmt 0 view .LVU157
 590 0062 22EF      		ldi r18,lo8(-14)
 591 0064 2093 E800 		sts 232,r18
 775:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 if (bRequest == GET_DESCRIPTOR) {
 592               		.loc 1 775 17 is_stmt 1 view .LVU158
 593               		.loc 1 775 20 is_stmt 0 view .LVU159
 594 0068 C630      		cpi r28,lo8(6)
 595 006a 01F0      		breq .+2
 596 006c 00C0      		rjmp .L125
 597 006e 20E0      		ldi r18,lo8(descriptor_list)
 598 0070 30E0      		ldi r19,hi8(descriptor_list)
 599               	.L67:
 600               	.LVL18:
 776:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			list = (const uint8_t *)descriptor_list;
 777:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			for (i=0; ; i++) {
 778:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (i >= NUM_DESC_LIST) {
 779:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 780:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 781:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 782:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				desc_val = pgm_read_word(list);
 601               		.loc 1 782 5 is_stmt 1 view .LVU160
 602               	.LBB80:
 603               		.loc 1 782 16 view .LVU161
 604               		.loc 1 782 16 view .LVU162
 605               		.loc 1 782 16 view .LVU163
 606 0072 F901      		movw r30,r18
 607               	/* #APP */
 608               	 ;  782 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
 609 0074 4591      		lpm r20, Z+
 610 0076 5491      		lpm r21, Z
 611               		
 612               	 ;  0 "" 2
 613               	.LVL19:
 614               		.loc 1 782 16 view .LVU164
 615               		.loc 1 782 16 is_stmt 0 view .LVU165
 616               	/* #NOAPP */
 617               	.LBE80:
 783:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (desc_val != wValue) {
 618               		.loc 1 783 5 is_stmt 1 view .LVU166
 619               		.loc 1 783 8 is_stmt 0 view .LVU167
 620 0078 E416      		cp r14,r20
 621 007a F506      		cpc r15,r21
 622 007c 01F0      		breq .+2
 623 007e 00C0      		rjmp .L62
 784:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					list += sizeof(struct descriptor_list_struct);
 785:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					continue;
 786:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 787:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				list += 2;
 624               		.loc 1 787 5 is_stmt 1 view .LVU168
 625               	.LVL20:
 788:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				desc_val = pgm_read_word(list);
 626               		.loc 1 788 5 view .LVU169
 627               	.LBB81:
 628               		.loc 1 788 16 view .LVU170
 629               		.loc 1 788 16 view .LVU171
 630               		.loc 1 788 16 view .LVU172
 631 0080 F901      		movw r30,r18
 632 0082 3296      		adiw r30,2
 633               	.LVL21:
 634               		.loc 1 788 16 is_stmt 0 view .LVU173
 635               	/* #APP */
 636               	 ;  788 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
 637 0084 4591      		lpm r20, Z+
 638 0086 5491      		lpm r21, Z
 639               		
 640               	 ;  0 "" 2
 641               	.LVL22:
 642               		.loc 1 788 16 is_stmt 1 view .LVU174
 643               		.loc 1 788 16 is_stmt 0 view .LVU175
 644               	/* #NOAPP */
 645               	.LBE81:
 789:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (desc_val != wIndex) {
 646               		.loc 1 789 5 is_stmt 1 view .LVU176
 647               		.loc 1 789 8 is_stmt 0 view .LVU177
 648 0088 0417      		cp r16,r20
 649 008a 1507      		cpc r17,r21
 650 008c 01F0      		breq .+2
 651 008e 00C0      		rjmp .L62
 790:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					list += sizeof(struct descriptor_list_struct)-2;
 791:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					continue;
 792:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 793:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				list += 2;
 652               		.loc 1 793 5 is_stmt 1 view .LVU178
 653               	.LVL23:
 794:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				desc_addr = (const uint8_t *)pgm_read_word(list);
 654               		.loc 1 794 5 view .LVU179
 655               	.LBB82:
 656               		.loc 1 794 34 view .LVU180
 657               	.LBE82:
 793:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				desc_addr = (const uint8_t *)pgm_read_word(list);
 658               		.loc 1 793 10 is_stmt 0 view .LVU181
 659 0090 F901      		movw r30,r18
 660 0092 3496      		adiw r30,4
 661               	.LVL24:
 662               	.LBB83:
 663               		.loc 1 794 34 is_stmt 1 view .LVU182
 664               		.loc 1 794 34 view .LVU183
 665               	/* #APP */
 666               	 ;  794 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
 667 0094 4591      		lpm r20, Z+
 668 0096 5491      		lpm r21, Z
 669               		
 670               	 ;  0 "" 2
 671               	.LVL25:
 672               		.loc 1 794 34 view .LVU184
 673               		.loc 1 794 34 is_stmt 0 view .LVU185
 674               	/* #NOAPP */
 675               	.LBE83:
 795:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				list += 2;
 676               		.loc 1 795 5 is_stmt 1 view .LVU186
 796:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				desc_length = pgm_read_byte(list);
 677               		.loc 1 796 5 view .LVU187
 678               	.LBB84:
 679               		.loc 1 796 19 view .LVU188
 680               		.loc 1 796 19 view .LVU189
 681               		.loc 1 796 19 view .LVU190
 682               	.LBE84:
 795:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				list += 2;
 683               		.loc 1 795 10 is_stmt 0 view .LVU191
 684 0098 F901      		movw r30,r18
 685 009a 3696      		adiw r30,6
 686               	.LVL26:
 687               	.LBB85:
 688               		.loc 1 796 19 view .LVU192
 689               	/* #APP */
 690               	 ;  796 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
 691 009c E491      		lpm r30, Z
 692               		
 693               	 ;  0 "" 2
 694               	.LVL27:
 695               		.loc 1 796 19 is_stmt 1 view .LVU193
 696               		.loc 1 796 19 is_stmt 0 view .LVU194
 697               	/* #NOAPP */
 698               	.LBE85:
 797:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				break;
 699               		.loc 1 797 5 is_stmt 1 view .LVU195
 798:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 799:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			len = (wLength < 256) ? wLength : 255;
 700               		.loc 1 799 4 view .LVU196
 800:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (len > desc_length) len = desc_length;
 701               		.loc 1 800 4 view .LVU197
 799:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (len > desc_length) len = desc_length;
 702               		.loc 1 799 36 is_stmt 0 view .LVU198
 703 009e 8F3F      		cpi r24,-1
 704 00a0 9105      		cpc r25,__zero_reg__
 705 00a2 01F0      		breq .L63
 706 00a4 00F0      		brlo .L63
 707 00a6 8FEF      		ldi r24,lo8(-1)
 708 00a8 90E0      		ldi r25,0
 709               	.LVL28:
 710               	.L63:
 799:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (len > desc_length) len = desc_length;
 711               		.loc 1 799 36 view .LVU199
 712 00aa E817      		cp r30,r24
 713 00ac 00F4      		brsh .L64
 714 00ae 8E2F      		mov r24,r30
 715               	.L64:
 716               	.LBB86:
 717               	.LBB87:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 718               		.loc 1 731 9 view .LVU200
 719 00b0 3EEF      		ldi r19,lo8(-2)
 720               	.LVL29:
 721               	.L68:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 722               		.loc 1 731 9 view .LVU201
 723               	.LBE87:
 724               	.LBE86:
 801:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			do {
 725               		.loc 1 801 4 is_stmt 1 discriminator 1 view .LVU202
 802:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				// wait for host ready for IN packet
 803:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				do {
 726               		.loc 1 803 5 discriminator 1 view .LVU203
 804:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					i = UEINTX;
 727               		.loc 1 804 6 discriminator 1 view .LVU204
 728               		.loc 1 804 8 is_stmt 0 discriminator 1 view .LVU205
 729 00b2 9091 E800 		lds r25,232
 730               	.LVL30:
 805:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 731               		.loc 1 805 14 is_stmt 1 discriminator 1 view .LVU206
 732 00b6 292F      		mov r18,r25
 733 00b8 2570      		andi r18,lo8(5)
 734 00ba 01F0      		breq .L68
 806:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (i & (1<<RXOUTI)) return;	// abort
 735               		.loc 1 806 5 view .LVU207
 736               		.loc 1 806 8 is_stmt 0 view .LVU208
 737 00bc 92FD      		sbrc r25,2
 738 00be 00C0      		rjmp .L57
 807:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				// send IN packet
 808:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 739               		.loc 1 808 5 is_stmt 1 view .LVU209
 740               		.loc 1 808 7 is_stmt 0 view .LVU210
 741 00c0 982F      		mov r25,r24
 742               	.LVL31:
 743               		.loc 1 808 7 view .LVU211
 744 00c2 8132      		cpi r24,lo8(33)
 745 00c4 00F0      		brlo .L70
 746 00c6 90E2      		ldi r25,lo8(32)
 747               	.L70:
 748               	.LVL32:
 809:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				for (i = n; i; i--) {
 749               		.loc 1 809 5 is_stmt 1 view .LVU212
 750               		.loc 1 809 5 is_stmt 0 view .LVU213
 751 00c8 FA01      		movw r30,r20
 752               		.loc 1 809 12 view .LVU214
 753 00ca 292F      		mov r18,r25
 754               	.LVL33:
 755               	.L71:
 756               		.loc 1 809 17 is_stmt 1 discriminator 1 view .LVU215
 757 00cc 2111      		cpse r18,__zero_reg__
 758 00ce 00C0      		rjmp .L72
 759               		.loc 1 809 17 is_stmt 0 discriminator 1 view .LVU216
 760 00d0 490F      		add r20,r25
 761 00d2 511D      		adc r21,__zero_reg__
 810:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = pgm_read_byte(desc_addr++);
 811:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 812:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				len -= n;
 762               		.loc 1 812 5 is_stmt 1 view .LVU217
 763               		.loc 1 812 9 is_stmt 0 view .LVU218
 764 00d4 282F      		mov r18,r24
 765               	.LVL34:
 766               		.loc 1 812 9 view .LVU219
 767 00d6 291B      		sub r18,r25
 768               	.LVL35:
 813:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_send_in();
 769               		.loc 1 813 5 is_stmt 1 view .LVU220
 770               	.LBB89:
 771               	.LBI86:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 772               		.loc 1 729 20 view .LVU221
 773               	.LBB88:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 774               		.loc 1 731 2 view .LVU222
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 775               		.loc 1 731 9 is_stmt 0 view .LVU223
 776 00d8 3093 E800 		sts 232,r19
 777               	.LBE88:
 778               	.LBE89:
 814:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			} while (len || n == ENDPOINT0_SIZE);
 779               		.loc 1 814 17 is_stmt 1 view .LVU224
 780 00dc 8913      		cpse r24,r25
 781 00de 00C0      		rjmp .L73
 782               		.loc 1 814 17 is_stmt 0 discriminator 1 view .LVU225
 783 00e0 8032      		cpi r24,lo8(32)
 784 00e2 01F0      		breq .L73
 785               	.LVL36:
 786               	.L57:
 787               	/* epilogue start */
 815:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 816:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                 }
 817:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (bRequest == SET_ADDRESS) {
 818:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 819:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 820:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UDADDR = wValue | (1<<ADDEN);
 821:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 822:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 823:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 824:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_configuration = wValue;
 825:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 826:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			cfg = endpoint_config_table;
 827:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			for (i=1; i<=MAX_ENDPOINT; i++) {
 828:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = i;
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				en = pgm_read_byte(cfg++);
 830:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 831:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECONX = (1<<EPEN);
 832:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG0X = pgm_read_byte(cfg++);
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG1X = pgm_read_byte(cfg++);
 834:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 835:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECONX = 0;
 836:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 837:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 838:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         		UERST = UERST_MASK;
 839:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         		UERST = 0;
 840:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 841:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 842:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 843:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 844:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UEDATX = usb_configuration;
 845:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 846:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 847:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 848:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 
 849:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (bRequest == GET_STATUS) {
 850:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 851:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			i = 0;
 852:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			#ifdef SUPPORT_ENDPOINT_HALT
 853:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0x82) {
 854:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = wIndex;
 855:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 856:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = 0;
 857:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 858:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			#endif
 859:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UEDATX = i;
 860:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UEDATX = 0;
 861:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 862:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 863:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 864:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE) {
 865:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SUPPORT_ENDPOINT_HALT
 866:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		    if (bmRequestType == 0x02 && wValue == ENDPOINT_HALT) {
 867:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			i = wIndex & 0x7F;
 868:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 869:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_send_in();
 870:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = i;
 871:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == SET_FEATURE) {
 872:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);
 873:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				} else {
 874:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 875:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UERST = (1 << i);
 876:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UERST = 0;
 877:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 878:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				return;
 879:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 880:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                     }
 881:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 882:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                     if (bmRequestType == 0x00 && wValue == DEVICE_REMOTE_WAKEUP) {
 883:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         if (bRequest == SET_FEATURE) {
 884:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                             remote_wakeup = true;   
 885:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         } else {
 886:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                             remote_wakeup = false;
 887:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         }
 888:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         usb_send_in();
 889:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         return;
 890:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                     }
 891:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 892:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (wIndex == KBD_INTERFACE) {
 893:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0xA1) {
 894:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_GET_REPORT) {
 895:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 896:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = keyboard_report->mods;
 897:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 898:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					for (i=0; i<6; i++) {
 899:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = keyboard_report->keys[i];
 900:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					}
 901:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 902:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 903:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 904:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_GET_IDLE) {
 905:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 906:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = keyboard_idle;
 907:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 908:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 909:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 910:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_GET_PROTOCOL) {
 911:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 912:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = keyboard_protocol;
 913:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 914:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 915:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 916:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 917:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0x21) {
 918:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_SET_REPORT) {
 919:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_receive_out();
 920:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_keyboard_leds = UEDATX;
 921:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_ack_out();
 922:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 923:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 924:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 925:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_SET_IDLE) {
 926:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					keyboard_idle = (wValue >> 8);
 927:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_keyboard_idle_count = 0;
 928:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					//usb_wait_in_ready();
 929:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 930:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 931:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 932:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_SET_PROTOCOL) {
 933:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					keyboard_protocol = wValue;
 934:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 935:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                         keyboard_nkro = !!keyboard_protocol;
 936:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 937:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                         clear_keyboard();
 938:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					//usb_wait_in_ready();
 939:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 940:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 941:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 942:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 943:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 944:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef MOUSE_ENABLE
 945:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (wIndex == MOUSE_INTERFACE) {
 946:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0xA1) {
 947:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_GET_REPORT) {
 948:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     if (wValue == HID_REPORT_INPUT) {
 949:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 950:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 951:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 952:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 953:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 954:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 955:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 956:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     }
 957:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     if (wValue == HID_REPORT_FEATURE) {
 958:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 959:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0x05;
 960:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 961:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 962:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     }
 963:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 964:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_GET_PROTOCOL) {
 965:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 966:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = usb_mouse_protocol;
 967:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 968:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 969:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 970:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 971:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0x21) {
 972:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_SET_PROTOCOL) {
 973:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_mouse_protocol = wValue;
 974:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 975:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 976:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 977:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 978:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 979:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #endif
 980:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		if (wIndex == DEBUG_INTERFACE) {
 981:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 982:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				len = wLength;
 983:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				do {
 984:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					// wait for host ready for IN packet
 985:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					do {
 986:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						i = UEINTX;
 987:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 988:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					if (i & (1<<RXOUTI)) return;	// abort
 989:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					// send IN packet
 990:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 991:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					for (i = n; i; i--) {
 992:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = 0;
 993:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					}
 994:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					len -= n;
 995:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 996:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				} while (len || n == ENDPOINT0_SIZE);
 997:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				return;
 998:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 999:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
1000:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	}
1001:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
1002:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 788               		.loc 1 1002 1 view .LVU226
 789 00e4 FF91      		pop r31
 790 00e6 EF91      		pop r30
 791 00e8 DF91      		pop r29
 792 00ea CF91      		pop r28
 793 00ec BF91      		pop r27
 794 00ee AF91      		pop r26
 795 00f0 9F91      		pop r25
 796 00f2 8F91      		pop r24
 797 00f4 7F91      		pop r23
 798 00f6 6F91      		pop r22
 799 00f8 5F91      		pop r21
 800 00fa 4F91      		pop r20
 801 00fc 3F91      		pop r19
 802 00fe 2F91      		pop r18
 803 0100 1F91      		pop r17
 804 0102 0F91      		pop r16
 805 0104 FF90      		pop r15
 806 0106 EF90      		pop r14
 807 0108 0F90      		pop r0
 808 010a 0BBE      		out __RAMPZ__,r0
 809 010c 0F90      		pop r0
 810 010e 0FBE      		out __SREG__,r0
 811 0110 0F90      		pop r0
 812 0112 1F90      		pop r1
 813 0114 1895      		reti
 814               	.LVL37:
 815               	.L62:
 777:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (i >= NUM_DESC_LIST) {
 816               		.loc 1 777 17 is_stmt 1 view .LVU227
 777:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (i >= NUM_DESC_LIST) {
 817               		.loc 1 777 4 view .LVU228
 778:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 818               		.loc 1 778 5 view .LVU229
 778:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 819               		.loc 1 778 8 is_stmt 0 view .LVU230
 820 0116 295F      		subi r18,-7
 821 0118 3F4F      		sbci r19,-1
 822               	.LVL38:
 778:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 823               		.loc 1 778 8 view .LVU231
 824 011a 40E0      		ldi r20,hi8(descriptor_list+77)
 825 011c 2030      		cpi r18,lo8(descriptor_list+77)
 826 011e 3407      		cpc r19,r20
 827               	.LVL39:
 778:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 828               		.loc 1 778 8 view .LVU232
 829 0120 01F0      		breq .+2
 830 0122 00C0      		rjmp .L67
 831               	.LVL40:
 832               	.L58:
1001:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 833               		.loc 1 1001 2 is_stmt 1 view .LVU233
1001:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 834               		.loc 1 1001 9 is_stmt 0 view .LVU234
 835 0124 81E2      		ldi r24,lo8(33)
 836 0126 8093 EB00 		sts 235,r24
 837 012a 00C0      		rjmp .L57
 838               	.LVL41:
 839               	.L73:
 749:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         uint8_t intbits;
 840               		.loc 1 749 1 discriminator 1 view .LVU235
 841 012c 822F      		mov r24,r18
 842 012e 00C0      		rjmp .L68
 843               	.LVL42:
 844               	.L72:
 810:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 845               		.loc 1 810 6 is_stmt 1 discriminator 3 view .LVU236
 846               	.LBB90:
 810:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 847               		.loc 1 810 15 discriminator 3 view .LVU237
 810:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 848               		.loc 1 810 15 discriminator 3 view .LVU238
 810:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 849               		.loc 1 810 15 discriminator 3 view .LVU239
 850               	/* #APP */
 851               	 ;  810 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
 852 0130 6491      		lpm r22, Z
 853               		
 854               	 ;  0 "" 2
 855               	.LVL43:
 810:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 856               		.loc 1 810 15 discriminator 3 view .LVU240
 857               	/* #NOAPP */
 858               	.LBE90:
 810:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 859               		.loc 1 810 13 is_stmt 0 discriminator 3 view .LVU241
 860 0132 6093 F100 		sts 241,r22
 809:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = pgm_read_byte(desc_addr++);
 861               		.loc 1 809 21 is_stmt 1 discriminator 3 view .LVU242
 862 0136 2150      		subi r18,lo8(-(-1))
 863               	.LVL44:
 809:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = pgm_read_byte(desc_addr++);
 864               		.loc 1 809 21 is_stmt 0 discriminator 3 view .LVU243
 865 0138 3196      		adiw r30,1
 866               	.LVL45:
 809:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = pgm_read_byte(desc_addr++);
 867               		.loc 1 809 21 discriminator 3 view .LVU244
 868 013a 00C0      		rjmp .L71
 869               	.LVL46:
 870               	.L125:
 817:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 871               		.loc 1 817 3 is_stmt 1 view .LVU245
 817:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 872               		.loc 1 817 6 is_stmt 0 view .LVU246
 873 013c C530      		cpi r28,lo8(5)
 874 013e 01F4      		brne .L75
 818:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 875               		.loc 1 818 4 is_stmt 1 view .LVU247
 876               	.LBB91:
 877               	.LBI91:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 878               		.loc 1 729 20 view .LVU248
 879               	.LBB92:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 880               		.loc 1 731 2 view .LVU249
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 881               		.loc 1 731 9 is_stmt 0 view .LVU250
 882 0140 8EEF      		ldi r24,lo8(-2)
 883               	.LVL47:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 884               		.loc 1 731 9 view .LVU251
 885 0142 8093 E800 		sts 232,r24
 886               	.LBE92:
 887               	.LBE91:
 819:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UDADDR = wValue | (1<<ADDEN);
 888               		.loc 1 819 4 is_stmt 1 view .LVU252
 889 0146 0E94 0000 		call usb_wait_in_ready
 890               	.LVL48:
 820:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 891               		.loc 1 820 4 view .LVU253
 820:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 892               		.loc 1 820 20 is_stmt 0 view .LVU254
 893 014a 8E2D      		mov r24,r14
 894 014c 8068      		ori r24,lo8(-128)
 820:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 895               		.loc 1 820 11 view .LVU255
 896 014e 8093 E300 		sts 227,r24
 821:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 		}
 897               		.loc 1 821 4 is_stmt 1 view .LVU256
 898 0152 00C0      		rjmp .L57
 899               	.LVL49:
 900               	.L75:
 823:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_configuration = wValue;
 901               		.loc 1 823 3 view .LVU257
 823:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_configuration = wValue;
 902               		.loc 1 823 6 is_stmt 0 view .LVU258
 903 0154 C930      		cpi r28,lo8(9)
 904 0156 01F4      		brne .L76
 823:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_configuration = wValue;
 905               		.loc 1 823 37 discriminator 1 view .LVU259
 906 0158 D111      		cpse r29,__zero_reg__
 907 015a 00C0      		rjmp .L77
 824:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 908               		.loc 1 824 4 is_stmt 1 view .LVU260
 824:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 909               		.loc 1 824 22 is_stmt 0 view .LVU261
 910 015c E092 0000 		sts usb_configuration,r14
 825:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			cfg = endpoint_config_table;
 911               		.loc 1 825 4 is_stmt 1 view .LVU262
 912               	.LBB93:
 913               	.LBI93:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 914               		.loc 1 729 20 view .LVU263
 915               	.LBB94:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 916               		.loc 1 731 2 view .LVU264
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 917               		.loc 1 731 9 is_stmt 0 view .LVU265
 918 0160 8EEF      		ldi r24,lo8(-2)
 919               	.LVL50:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 920               		.loc 1 731 9 view .LVU266
 921 0162 8093 E800 		sts 232,r24
 922               	.LBE94:
 923               	.LBE93:
 826:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			for (i=1; i<=MAX_ENDPOINT; i++) {
 924               		.loc 1 826 4 is_stmt 1 view .LVU267
 827:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = i;
 925               		.loc 1 827 4 view .LVU268
 926               	.LVL51:
 827:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = i;
 927               		.loc 1 827 15 view .LVU269
 827:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = i;
 928               		.loc 1 827 10 is_stmt 0 view .LVU270
 929 0166 21E0      		ldi r18,lo8(1)
 826:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			for (i=1; i<=MAX_ENDPOINT; i++) {
 930               		.loc 1 826 8 view .LVU271
 931 0168 80E0      		ldi r24,lo8(endpoint_config_table)
 932 016a 90E0      		ldi r25,hi8(endpoint_config_table)
 831:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG0X = pgm_read_byte(cfg++);
 933               		.loc 1 831 44 view .LVU272
 934 016c 31E0      		ldi r19,lo8(1)
 935               	.LVL52:
 936               	.L80:
 828:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				en = pgm_read_byte(cfg++);
 937               		.loc 1 828 5 is_stmt 1 view .LVU273
 828:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				en = pgm_read_byte(cfg++);
 938               		.loc 1 828 11 is_stmt 0 view .LVU274
 939 016e 2093 E900 		sts 233,r18
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 940               		.loc 1 829 5 is_stmt 1 view .LVU275
 941               	.LBB95:
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 942               		.loc 1 829 10 view .LVU276
 943 0172 AC01      		movw r20,r24
 944 0174 4F5F      		subi r20,-1
 945 0176 5F4F      		sbci r21,-1
 946               	.LVL53:
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 947               		.loc 1 829 10 view .LVU277
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 948               		.loc 1 829 10 view .LVU278
 949 0178 FC01      		movw r30,r24
 950               	/* #APP */
 951               	 ;  829 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
 952 017a 6491      		lpm r22, Z
 953               		
 954               	 ;  0 "" 2
 955               	.LVL54:
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 956               		.loc 1 829 10 view .LVU279
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 957               		.loc 1 829 10 is_stmt 0 view .LVU280
 958               	/* #NOAPP */
 959               	.LBE95:
 830:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECONX = (1<<EPEN);
 960               		.loc 1 830 33 is_stmt 1 view .LVU281
 830:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECONX = (1<<EPEN);
 961               		.loc 1 830 36 is_stmt 0 view .LVU282
 962 017c 6623      		tst r22
 963 017e 01F0      		breq .L78
 831:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG0X = pgm_read_byte(cfg++);
 964               		.loc 1 831 37 is_stmt 1 view .LVU283
 831:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG0X = pgm_read_byte(cfg++);
 965               		.loc 1 831 44 is_stmt 0 view .LVU284
 966 0180 3093 EB00 		sts 235,r19
 832:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG1X = pgm_read_byte(cfg++);
 967               		.loc 1 832 37 is_stmt 1 view .LVU285
 968               	.LBB96:
 832:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG1X = pgm_read_byte(cfg++);
 969               		.loc 1 832 47 view .LVU286
 970               	.LVL55:
 832:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG1X = pgm_read_byte(cfg++);
 971               		.loc 1 832 47 view .LVU287
 832:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG1X = pgm_read_byte(cfg++);
 972               		.loc 1 832 47 view .LVU288
 973 0184 FA01      		movw r30,r20
 974               	/* #APP */
 975               	 ;  832 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
 976 0186 4491      		lpm r20, Z
 977               		
 978               	 ;  0 "" 2
 979               	.LVL56:
 832:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG1X = pgm_read_byte(cfg++);
 980               		.loc 1 832 47 view .LVU289
 981               	/* #NOAPP */
 982               	.LBE96:
 832:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                     UECFG1X = pgm_read_byte(cfg++);
 983               		.loc 1 832 45 is_stmt 0 view .LVU290
 984 0188 4093 EC00 		sts 236,r20
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 985               		.loc 1 833 37 is_stmt 1 view .LVU291
 986               	.LBB97:
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 987               		.loc 1 833 47 view .LVU292
 988               	.LVL57:
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 989               		.loc 1 833 47 view .LVU293
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 990               		.loc 1 833 47 view .LVU294
 991 018c 3196      		adiw r30,1
 992               	.LVL58:
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 993               		.loc 1 833 47 is_stmt 0 view .LVU295
 994               	/* #APP */
 995               	 ;  833 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.c" 1
 996 018e E491      		lpm r30, Z
 997               		
 998               	 ;  0 "" 2
 999               	.LVL59:
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 1000               		.loc 1 833 47 view .LVU296
 1001               	/* #NOAPP */
 1002 0190 0396      		adiw r24,3
 1003               	.LVL60:
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 1004               		.loc 1 833 47 is_stmt 1 view .LVU297
 1005               	.LBE97:
 833:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 } else {
 1006               		.loc 1 833 45 is_stmt 0 view .LVU298
 1007 0192 E093 ED00 		sts 237,r30
 1008               	.LVL61:
 1009               	.L79:
 827:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = i;
 1010               		.loc 1 827 32 is_stmt 1 discriminator 2 view .LVU299
 1011 0196 2F5F      		subi r18,lo8(-(1))
 1012               	.LVL62:
 827:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = i;
 1013               		.loc 1 827 15 discriminator 2 view .LVU300
 1014 0198 2730      		cpi r18,lo8(7)
 1015 019a 01F4      		brne .L80
 838:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         		UERST = 0;
 1016               		.loc 1 838 11 view .LVU301
 838:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****         		UERST = 0;
 1017               		.loc 1 838 17 is_stmt 0 view .LVU302
 1018 019c 8EE7      		ldi r24,lo8(126)
 1019               	.LVL63:
 1020               	.L127:
 875:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UERST = 0;
 1021               		.loc 1 875 12 view .LVU303
 1022 019e 8093 EA00 		sts 234,r24
 876:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 1023               		.loc 1 876 6 is_stmt 1 view .LVU304
 876:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 1024               		.loc 1 876 12 is_stmt 0 view .LVU305
 1025 01a2 1092 EA00 		sts 234,__zero_reg__
 1026 01a6 00C0      		rjmp .L57
 1027               	.LVL64:
 1028               	.L78:
 835:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 1029               		.loc 1 835 37 is_stmt 1 view .LVU306
 835:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 1030               		.loc 1 835 44 is_stmt 0 view .LVU307
 1031 01a8 1092 EB00 		sts 235,__zero_reg__
 1032               	.LBB98:
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 1033               		.loc 1 829 10 view .LVU308
 1034 01ac CA01      		movw r24,r20
 1035               	.LVL65:
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 1036               		.loc 1 829 10 view .LVU309
 1037 01ae 00C0      		rjmp .L79
 1038               	.LVL66:
 1039               	.L76:
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 1040               		.loc 1 829 10 view .LVU310
 1041               	.LBE98:
 842:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 1042               		.loc 1 842 3 is_stmt 1 view .LVU311
 842:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 1043               		.loc 1 842 6 is_stmt 0 view .LVU312
 1044 01b0 C830      		cpi r28,lo8(8)
 1045 01b2 01F4      		brne .L81
 842:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 1046               		.loc 1 842 37 discriminator 1 view .LVU313
 1047 01b4 D038      		cpi r29,lo8(-128)
 1048 01b6 01F0      		breq .+2
 1049 01b8 00C0      		rjmp .L77
 843:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UEDATX = usb_configuration;
 1050               		.loc 1 843 4 is_stmt 1 view .LVU314
 1051 01ba 0E94 0000 		call usb_wait_in_ready
 1052               	.LVL67:
 844:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 1053               		.loc 1 844 4 view .LVU315
 844:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 1054               		.loc 1 844 11 is_stmt 0 view .LVU316
 1055 01be 8091 0000 		lds r24,usb_configuration
 1056               	.L129:
 912:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1057               		.loc 1 912 13 view .LVU317
 1058 01c2 8093 F100 		sts 241,r24
 913:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 1059               		.loc 1 913 6 is_stmt 1 view .LVU318
 1060               	.LBB99:
 1061               	.LBI99:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1062               		.loc 1 729 20 view .LVU319
 1063               	.LBB100:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1064               		.loc 1 731 2 view .LVU320
 1065 01c6 00C0      		rjmp .L128
 1066               	.LVL68:
 1067               	.L81:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1068               		.loc 1 731 2 is_stmt 0 view .LVU321
 1069               	.LBE100:
 1070               	.LBE99:
 849:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 1071               		.loc 1 849 3 is_stmt 1 view .LVU322
 849:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_wait_in_ready();
 1072               		.loc 1 849 6 is_stmt 0 view .LVU323
 1073 01c8 C111      		cpse r28,__zero_reg__
 1074 01ca 00C0      		rjmp .L82
 850:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			i = 0;
 1075               		.loc 1 850 4 is_stmt 1 view .LVU324
 1076 01cc 0E94 0000 		call usb_wait_in_ready
 1077               	.LVL69:
 851:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			#ifdef SUPPORT_ENDPOINT_HALT
 1078               		.loc 1 851 4 view .LVU325
 853:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = wIndex;
 1079               		.loc 1 853 4 view .LVU326
 853:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = wIndex;
 1080               		.loc 1 853 7 is_stmt 0 view .LVU327
 1081 01d0 D238      		cpi r29,lo8(-126)
 1082 01d2 01F4      		brne .L83
 854:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 1083               		.loc 1 854 5 is_stmt 1 view .LVU328
 854:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 1084               		.loc 1 854 11 is_stmt 0 view .LVU329
 1085 01d4 0093 E900 		sts 233,r16
 855:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = 0;
 1086               		.loc 1 855 5 is_stmt 1 view .LVU330
 855:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = 0;
 1087               		.loc 1 855 9 is_stmt 0 view .LVU331
 1088 01d8 C091 EB00 		lds r28,235
 1089               	.LVL70:
 855:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = 0;
 1090               		.loc 1 855 8 view .LVU332
 1091 01dc C5FB      		bst r28,5
 1092 01de CC27      		clr r28
 1093 01e0 C0F9      		bld r28,0
 1094               	.LVL71:
 856:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 1095               		.loc 1 856 5 is_stmt 1 view .LVU333
 856:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			}
 1096               		.loc 1 856 11 is_stmt 0 view .LVU334
 1097 01e2 1092 E900 		sts 233,__zero_reg__
 1098               	.LVL72:
 1099               	.L83:
 859:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UEDATX = 0;
 1100               		.loc 1 859 4 is_stmt 1 view .LVU335
 859:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			UEDATX = 0;
 1101               		.loc 1 859 11 is_stmt 0 view .LVU336
 1102 01e6 C093 F100 		sts 241,r28
 860:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 1103               		.loc 1 860 4 is_stmt 1 view .LVU337
 860:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			usb_send_in();
 1104               		.loc 1 860 11 is_stmt 0 view .LVU338
 1105 01ea 1092 F100 		sts 241,__zero_reg__
 861:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			return;
 1106               		.loc 1 861 4 is_stmt 1 view .LVU339
 1107               	.LBB101:
 1108               	.LBI101:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1109               		.loc 1 729 20 view .LVU340
 1110               	.LBB102:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1111               		.loc 1 731 2 view .LVU341
 1112               	.LVL73:
 1113               	.L128:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1114               		.loc 1 731 2 is_stmt 0 view .LVU342
 1115               	.LBE102:
 1116               	.LBE101:
 939:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 1117               		.loc 1 939 6 is_stmt 1 view .LVU343
 1118               	.LBB103:
 1119               	.LBI103:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1120               		.loc 1 729 20 view .LVU344
 1121               	.LBB104:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1122               		.loc 1 731 2 view .LVU345
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1123               		.loc 1 731 9 is_stmt 0 view .LVU346
 1124 01ee 8EEF      		ldi r24,lo8(-2)
 1125 01f0 8093 E800 		sts 232,r24
 1126               	.LBE104:
 1127               	.LBE103:
 940:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				}
 1128               		.loc 1 940 6 is_stmt 1 view .LVU347
 1129 01f4 00C0      		rjmp .L57
 1130               	.LVL74:
 1131               	.L82:
 864:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SUPPORT_ENDPOINT_HALT
 1132               		.loc 1 864 3 view .LVU348
 864:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef SUPPORT_ENDPOINT_HALT
 1133               		.loc 1 864 6 is_stmt 0 view .LVU349
 1134 01f6 2C2F      		mov r18,r28
 1135 01f8 2D7F      		andi r18,lo8(-3)
 1136 01fa 2130      		cpi r18,lo8(1)
 1137 01fc 01F4      		brne .L77
 866:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			i = wIndex & 0x7F;
 1138               		.loc 1 866 7 is_stmt 1 view .LVU350
 866:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			i = wIndex & 0x7F;
 1139               		.loc 1 866 10 is_stmt 0 view .LVU351
 1140 01fe D230      		cpi r29,lo8(2)
 1141 0200 01F4      		brne .L84
 866:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			i = wIndex & 0x7F;
 1142               		.loc 1 866 33 discriminator 1 view .LVU352
 1143 0202 EF28      		or r14,r15
 1144 0204 01F0      		breq .+2
 1145 0206 00C0      		rjmp .L85
 867:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 1146               		.loc 1 867 4 is_stmt 1 view .LVU353
 867:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 1147               		.loc 1 867 6 is_stmt 0 view .LVU354
 1148 0208 202F      		mov r18,r16
 1149 020a 2F77      		andi r18,lo8(127)
 1150               	.LVL75:
 868:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_send_in();
 1151               		.loc 1 868 4 is_stmt 1 view .LVU355
 868:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_send_in();
 1152               		.loc 1 868 15 is_stmt 0 view .LVU356
 1153 020c 3FEF      		ldi r19,lo8(-1)
 1154 020e 320F      		add r19,r18
 868:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				usb_send_in();
 1155               		.loc 1 868 7 view .LVU357
 1156 0210 3630      		cpi r19,lo8(6)
 1157 0212 00F0      		brlo .+2
 1158 0214 00C0      		rjmp .L85
 869:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				UENUM = i;
 1159               		.loc 1 869 5 is_stmt 1 view .LVU358
 1160               	.LBB105:
 1161               	.LBI105:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1162               		.loc 1 729 20 view .LVU359
 1163               	.LBB106:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1164               		.loc 1 731 2 view .LVU360
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1165               		.loc 1 731 9 is_stmt 0 view .LVU361
 1166 0216 8EEF      		ldi r24,lo8(-2)
 1167               	.LVL76:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1168               		.loc 1 731 9 view .LVU362
 1169 0218 8093 E800 		sts 232,r24
 1170               	.LBE106:
 1171               	.LBE105:
 870:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == SET_FEATURE) {
 1172               		.loc 1 870 5 is_stmt 1 view .LVU363
 870:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == SET_FEATURE) {
 1173               		.loc 1 870 11 is_stmt 0 view .LVU364
 1174 021c 2093 E900 		sts 233,r18
 871:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);
 1175               		.loc 1 871 5 is_stmt 1 view .LVU365
 871:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);
 1176               		.loc 1 871 8 is_stmt 0 view .LVU366
 1177 0220 C330      		cpi r28,lo8(3)
 1178 0222 01F4      		brne .+2
 1179 0224 00C0      		rjmp .L58
 874:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UERST = (1 << i);
 1180               		.loc 1 874 6 is_stmt 1 view .LVU367
 874:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UERST = (1 << i);
 1181               		.loc 1 874 13 is_stmt 0 view .LVU368
 1182 0226 89E1      		ldi r24,lo8(25)
 1183 0228 8093 EB00 		sts 235,r24
 875:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UERST = 0;
 1184               		.loc 1 875 6 is_stmt 1 view .LVU369
 875:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UERST = 0;
 1185               		.loc 1 875 17 is_stmt 0 view .LVU370
 1186 022c 81E0      		ldi r24,lo8(1)
 1187 022e 90E0      		ldi r25,0
 1188 0230 00C0      		rjmp 2f
 1189               		1:
 1190 0232 880F      		lsl r24
 1191               		2:
 1192 0234 2A95      		dec r18
 1193 0236 02F4      		brpl 1b
 1194 0238 00C0      		rjmp .L127
 1195               	.LVL77:
 1196               	.L84:
 882:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         if (bRequest == SET_FEATURE) {
 1197               		.loc 1 882 21 is_stmt 1 view .LVU371
 882:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         if (bRequest == SET_FEATURE) {
 1198               		.loc 1 882 24 is_stmt 0 view .LVU372
 1199 023a D111      		cpse r29,__zero_reg__
 1200 023c 00C0      		rjmp .L77
 882:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         if (bRequest == SET_FEATURE) {
 1201               		.loc 1 882 47 discriminator 1 view .LVU373
 1202 023e EA94      		dec r14
 1203 0240 EF28      		or r14,r15
 1204 0242 01F0      		breq .+2
 1205 0244 00C0      		rjmp .L85
 883:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                             remote_wakeup = true;   
 1206               		.loc 1 883 25 is_stmt 1 view .LVU374
 883:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                             remote_wakeup = true;   
 1207               		.loc 1 883 28 is_stmt 0 view .LVU375
 1208 0246 81E0      		ldi r24,lo8(1)
 1209               	.LVL78:
 883:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                             remote_wakeup = true;   
 1210               		.loc 1 883 28 view .LVU376
 1211 0248 C330      		cpi r28,lo8(3)
 1212 024a 01F0      		breq .L87
 1213 024c 80E0      		ldi r24,0
 1214               	.L87:
 884:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         } else {
 1215               		.loc 1 884 43 view .LVU377
 1216 024e 8093 0000 		sts remote_wakeup,r24
 888:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                         return;
 1217               		.loc 1 888 25 is_stmt 1 view .LVU378
 1218               	.LBB107:
 1219               	.LBI107:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1220               		.loc 1 729 20 view .LVU379
 1221               	.LBB108:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1222               		.loc 1 731 2 view .LVU380
 1223 0252 00C0      		rjmp .L128
 1224               	.LVL79:
 1225               	.L77:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1226               		.loc 1 731 2 is_stmt 0 view .LVU381
 1227               	.LBE108:
 1228               	.LBE107:
 892:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0xA1) {
 1229               		.loc 1 892 3 is_stmt 1 view .LVU382
 892:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0xA1) {
 1230               		.loc 1 892 6 is_stmt 0 view .LVU383
 1231 0254 0115      		cp r16,__zero_reg__
 1232 0256 1105      		cpc r17,__zero_reg__
 1233 0258 01F0      		breq .+2
 1234 025a 00C0      		rjmp .L88
 893:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_GET_REPORT) {
 1235               		.loc 1 893 4 is_stmt 1 view .LVU384
 893:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_GET_REPORT) {
 1236               		.loc 1 893 7 is_stmt 0 view .LVU385
 1237 025c D13A      		cpi r29,lo8(-95)
 1238 025e 01F4      		brne .L89
 894:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 1239               		.loc 1 894 5 is_stmt 1 view .LVU386
 894:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 1240               		.loc 1 894 8 is_stmt 0 view .LVU387
 1241 0260 C130      		cpi r28,lo8(1)
 1242 0262 01F4      		brne .L90
 895:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = keyboard_report->mods;
 1243               		.loc 1 895 6 is_stmt 1 view .LVU388
 1244 0264 0E94 0000 		call usb_wait_in_ready
 1245               	.LVL80:
 896:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 1246               		.loc 1 896 6 view .LVU389
 896:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 1247               		.loc 1 896 30 is_stmt 0 view .LVU390
 1248 0268 E091 0000 		lds r30,keyboard_report
 1249 026c F091 0000 		lds r31,keyboard_report+1
 1250 0270 8081      		ld r24,Z
 896:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = 0;
 1251               		.loc 1 896 13 view .LVU391
 1252 0272 8093 F100 		sts 241,r24
 897:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					for (i=0; i<6; i++) {
 1253               		.loc 1 897 6 is_stmt 1 view .LVU392
 897:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					for (i=0; i<6; i++) {
 1254               		.loc 1 897 13 is_stmt 0 view .LVU393
 1255 0276 1092 F100 		sts 241,__zero_reg__
 898:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = keyboard_report->keys[i];
 1256               		.loc 1 898 6 is_stmt 1 view .LVU394
 1257               	.LVL81:
 898:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = keyboard_report->keys[i];
 1258               		.loc 1 898 17 view .LVU395
 1259               	.L91:
 899:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					}
 1260               		.loc 1 899 7 discriminator 3 view .LVU396
 899:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					}
 1261               		.loc 1 899 37 is_stmt 0 discriminator 3 view .LVU397
 1262 027a E091 0000 		lds r30,keyboard_report
 1263 027e F091 0000 		lds r31,keyboard_report+1
 1264 0282 E00F      		add r30,r16
 1265 0284 F11F      		adc r31,r17
 1266 0286 8281      		ldd r24,Z+2
 899:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					}
 1267               		.loc 1 899 14 discriminator 3 view .LVU398
 1268 0288 8093 F100 		sts 241,r24
 898:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = keyboard_report->keys[i];
 1269               		.loc 1 898 22 is_stmt 1 discriminator 3 view .LVU399
 1270               	.LVL82:
 898:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = keyboard_report->keys[i];
 1271               		.loc 1 898 17 discriminator 3 view .LVU400
 1272 028c 0F5F      		subi r16,-1
 1273 028e 1F4F      		sbci r17,-1
 1274               	.LVL83:
 898:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = keyboard_report->keys[i];
 1275               		.loc 1 898 17 is_stmt 0 discriminator 3 view .LVU401
 1276 0290 0630      		cpi r16,6
 1277 0292 1105      		cpc r17,__zero_reg__
 1278 0294 01F4      		brne .L91
 1279 0296 00C0      		rjmp .L128
 1280               	.LVL84:
 1281               	.L90:
 904:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 1282               		.loc 1 904 5 is_stmt 1 view .LVU402
 904:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 1283               		.loc 1 904 8 is_stmt 0 view .LVU403
 1284 0298 C230      		cpi r28,lo8(2)
 1285 029a 01F4      		brne .L92
 905:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = keyboard_idle;
 1286               		.loc 1 905 6 is_stmt 1 view .LVU404
 1287 029c 0E94 0000 		call usb_wait_in_ready
 1288               	.LVL85:
 906:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1289               		.loc 1 906 6 view .LVU405
 906:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1290               		.loc 1 906 13 is_stmt 0 view .LVU406
 1291 02a0 8091 0000 		lds r24,keyboard_idle
 1292 02a4 00C0      		rjmp .L129
 1293               	.LVL86:
 1294               	.L92:
 910:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 1295               		.loc 1 910 5 is_stmt 1 view .LVU407
 910:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_in_ready();
 1296               		.loc 1 910 8 is_stmt 0 view .LVU408
 1297 02a6 C330      		cpi r28,lo8(3)
 1298 02a8 01F0      		breq .+2
 1299 02aa 00C0      		rjmp .L58
 911:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					UEDATX = keyboard_protocol;
 1300               		.loc 1 911 6 is_stmt 1 view .LVU409
 1301 02ac 0E94 0000 		call usb_wait_in_ready
 1302               	.LVL87:
 912:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1303               		.loc 1 912 6 view .LVU410
 912:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1304               		.loc 1 912 13 is_stmt 0 view .LVU411
 1305 02b0 8091 0000 		lds r24,keyboard_protocol
 1306 02b4 00C0      		rjmp .L129
 1307               	.LVL88:
 1308               	.L89:
 917:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_SET_REPORT) {
 1309               		.loc 1 917 4 is_stmt 1 view .LVU412
 917:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				if (bRequest == HID_SET_REPORT) {
 1310               		.loc 1 917 7 is_stmt 0 view .LVU413
 1311 02b6 D132      		cpi r29,lo8(33)
 1312 02b8 01F0      		breq .+2
 1313 02ba 00C0      		rjmp .L58
 918:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_receive_out();
 1314               		.loc 1 918 5 is_stmt 1 view .LVU414
 918:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_wait_receive_out();
 1315               		.loc 1 918 8 is_stmt 0 view .LVU415
 1316 02bc C930      		cpi r28,lo8(9)
 1317 02be 01F4      		brne .L93
 1318               	.LVL89:
 1319               	.L94:
 1320               	.LBB109:
 1321               	.LBB110:
 735:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1322               		.loc 1 735 9 is_stmt 1 view .LVU416
 735:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1323               		.loc 1 735 11 is_stmt 0 view .LVU417
 1324 02c0 8091 E800 		lds r24,232
 735:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1325               		.loc 1 735 9 view .LVU418
 1326 02c4 82FF      		sbrs r24,2
 1327 02c6 00C0      		rjmp .L94
 1328               	.LBE110:
 1329               	.LBE109:
 920:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_ack_out();
 1330               		.loc 1 920 6 is_stmt 1 view .LVU419
 920:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_ack_out();
 1331               		.loc 1 920 26 is_stmt 0 view .LVU420
 1332 02c8 8091 F100 		lds r24,241
 920:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_ack_out();
 1333               		.loc 1 920 24 view .LVU421
 1334 02cc 8093 0000 		sts usb_keyboard_leds,r24
 921:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1335               		.loc 1 921 6 is_stmt 1 view .LVU422
 1336               	.LBB111:
 1337               	.LBI111:
 737:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1338               		.loc 1 737 20 view .LVU423
 1339               	.LBB112:
 739:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1340               		.loc 1 739 2 view .LVU424
 739:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1341               		.loc 1 739 9 is_stmt 0 view .LVU425
 1342 02d0 8BEF      		ldi r24,lo8(-5)
 1343 02d2 8093 E800 		sts 232,r24
 1344               	.LBE112:
 1345               	.LBE111:
 922:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 1346               		.loc 1 922 6 is_stmt 1 view .LVU426
 1347               	.LBB113:
 1348               	.LBI113:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1349               		.loc 1 729 20 view .LVU427
 1350               	.LBB114:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1351               		.loc 1 731 2 view .LVU428
 1352 02d6 00C0      		rjmp .L128
 1353               	.LVL90:
 1354               	.L93:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1355               		.loc 1 731 2 is_stmt 0 view .LVU429
 1356               	.LBE114:
 1357               	.LBE113:
 925:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					keyboard_idle = (wValue >> 8);
 1358               		.loc 1 925 5 is_stmt 1 view .LVU430
 925:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					keyboard_idle = (wValue >> 8);
 1359               		.loc 1 925 8 is_stmt 0 view .LVU431
 1360 02d8 CA30      		cpi r28,lo8(10)
 1361 02da 01F4      		brne .L95
 926:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_keyboard_idle_count = 0;
 1362               		.loc 1 926 6 is_stmt 1 view .LVU432
 926:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_keyboard_idle_count = 0;
 1363               		.loc 1 926 20 is_stmt 0 view .LVU433
 1364 02dc F092 0000 		sts keyboard_idle,r15
 927:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					//usb_wait_in_ready();
 1365               		.loc 1 927 6 is_stmt 1 view .LVU434
 927:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					//usb_wait_in_ready();
 1366               		.loc 1 927 30 is_stmt 0 view .LVU435
 1367 02e0 1092 0000 		sts usb_keyboard_idle_count,__zero_reg__
 929:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					return;
 1368               		.loc 1 929 6 is_stmt 1 view .LVU436
 1369               	.LBB115:
 1370               	.LBI115:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1371               		.loc 1 729 20 view .LVU437
 1372               	.LBB116:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1373               		.loc 1 731 2 view .LVU438
 1374 02e4 00C0      		rjmp .L128
 1375               	.L95:
 1376               	.LBE116:
 1377               	.LBE115:
 932:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					keyboard_protocol = wValue;
 1378               		.loc 1 932 5 view .LVU439
 932:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					keyboard_protocol = wValue;
 1379               		.loc 1 932 8 is_stmt 0 view .LVU440
 1380 02e6 CB30      		cpi r28,lo8(11)
 1381 02e8 01F0      		breq .+2
 1382 02ea 00C0      		rjmp .L58
 933:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 1383               		.loc 1 933 6 is_stmt 1 view .LVU441
 933:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** #ifdef NKRO_ENABLE
 1384               		.loc 1 933 24 is_stmt 0 view .LVU442
 1385 02ec E092 0000 		sts keyboard_protocol,r14
 937:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					//usb_wait_in_ready();
 1386               		.loc 1 937 41 is_stmt 1 view .LVU443
 1387 02f0 0E94 0000 		call clear_keyboard
 1388               	.LVL91:
 937:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					//usb_wait_in_ready();
 1389               		.loc 1 937 41 is_stmt 0 view .LVU444
 1390 02f4 00C0      		rjmp .L128
 1391               	.LVL92:
 1392               	.L100:
 992:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					}
 1393               		.loc 1 992 7 is_stmt 1 discriminator 3 view .LVU445
 992:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					}
 1394               		.loc 1 992 14 is_stmt 0 discriminator 3 view .LVU446
 1395 02f6 1092 F100 		sts 241,__zero_reg__
 991:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = 0;
 1396               		.loc 1 991 22 is_stmt 1 discriminator 3 view .LVU447
 1397 02fa 2150      		subi r18,lo8(-(-1))
 1398               	.LVL93:
 991:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = 0;
 1399               		.loc 1 991 22 is_stmt 0 discriminator 3 view .LVU448
 1400 02fc 00C0      		rjmp .L99
 1401               	.LVL94:
 1402               	.L85:
 892:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0xA1) {
 1403               		.loc 1 892 3 is_stmt 1 view .LVU449
 892:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bmRequestType == 0xA1) {
 1404               		.loc 1 892 6 is_stmt 0 view .LVU450
 1405 02fe 0115      		cp r16,__zero_reg__
 1406 0300 1105      		cpc r17,__zero_reg__
 1407 0302 01F4      		brne .+2
 1408 0304 00C0      		rjmp .L58
 1409               	.L88:
 980:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 1410               		.loc 1 980 3 is_stmt 1 view .LVU451
 980:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 			if (bRequest == HID_GET_REPORT && bmRequestType == 0xA1) {
 1411               		.loc 1 980 6 is_stmt 0 view .LVU452
 1412 0306 0230      		cpi r16,2
 1413 0308 1105      		cpc r17,__zero_reg__
 1414 030a 01F0      		breq .+2
 1415 030c 00C0      		rjmp .L58
 981:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				len = wLength;
 1416               		.loc 1 981 4 is_stmt 1 view .LVU453
 981:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				len = wLength;
 1417               		.loc 1 981 7 is_stmt 0 view .LVU454
 1418 030e C130      		cpi r28,lo8(1)
 1419 0310 01F0      		breq .+2
 1420 0312 00C0      		rjmp .L58
 1421               	.LBB117:
 1422               	.LBB118:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1423               		.loc 1 731 9 discriminator 1 view .LVU455
 1424 0314 3EEF      		ldi r19,lo8(-2)
 1425               	.LBE118:
 1426               	.LBE117:
 981:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				len = wLength;
 1427               		.loc 1 981 35 discriminator 1 view .LVU456
 1428 0316 D13A      		cpi r29,lo8(-95)
 1429 0318 01F0      		breq .+2
 1430 031a 00C0      		rjmp .L58
 1431               	.LVL95:
 1432               	.L97:
 983:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					// wait for host ready for IN packet
 1433               		.loc 1 983 5 is_stmt 1 discriminator 1 view .LVU457
 985:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						i = UEINTX;
 1434               		.loc 1 985 6 discriminator 1 view .LVU458
 986:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 1435               		.loc 1 986 7 discriminator 1 view .LVU459
 986:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 1436               		.loc 1 986 9 is_stmt 0 discriminator 1 view .LVU460
 1437 031c 9091 E800 		lds r25,232
 1438               	.LVL96:
 987:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					if (i & (1<<RXOUTI)) return;	// abort
 1439               		.loc 1 987 15 is_stmt 1 discriminator 1 view .LVU461
 1440 0320 292F      		mov r18,r25
 1441 0322 2570      		andi r18,lo8(5)
 1442 0324 01F0      		breq .L97
 988:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					// send IN packet
 1443               		.loc 1 988 6 view .LVU462
 988:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					// send IN packet
 1444               		.loc 1 988 9 is_stmt 0 view .LVU463
 1445 0326 92FD      		sbrc r25,2
 1446 0328 00C0      		rjmp .L57
 990:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					for (i = n; i; i--) {
 1447               		.loc 1 990 6 is_stmt 1 view .LVU464
 990:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					for (i = n; i; i--) {
 1448               		.loc 1 990 8 is_stmt 0 view .LVU465
 1449 032a 982F      		mov r25,r24
 1450               	.LVL97:
 990:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					for (i = n; i; i--) {
 1451               		.loc 1 990 8 view .LVU466
 1452 032c 8132      		cpi r24,lo8(33)
 1453 032e 00F0      		brlo .L98
 1454 0330 90E2      		ldi r25,lo8(32)
 1455               	.L98:
 1456               	.LVL98:
 991:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = 0;
 1457               		.loc 1 991 6 is_stmt 1 view .LVU467
 991:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = 0;
 1458               		.loc 1 991 13 is_stmt 0 view .LVU468
 1459 0332 292F      		mov r18,r25
 1460               	.LVL99:
 1461               	.L99:
 991:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 						UEDATX = 0;
 1462               		.loc 1 991 18 is_stmt 1 discriminator 1 view .LVU469
 1463 0334 2111      		cpse r18,__zero_reg__
 1464 0336 00C0      		rjmp .L100
 994:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1465               		.loc 1 994 6 view .LVU470
 994:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1466               		.loc 1 994 10 is_stmt 0 view .LVU471
 1467 0338 282F      		mov r18,r24
 1468               	.LVL100:
 994:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 					usb_send_in();
 1469               		.loc 1 994 10 view .LVU472
 1470 033a 291B      		sub r18,r25
 1471               	.LVL101:
 995:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				} while (len || n == ENDPOINT0_SIZE);
 1472               		.loc 1 995 6 is_stmt 1 view .LVU473
 1473               	.LBB120:
 1474               	.LBI117:
 729:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** {
 1475               		.loc 1 729 20 view .LVU474
 1476               	.LBB119:
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1477               		.loc 1 731 2 view .LVU475
 731:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** }
 1478               		.loc 1 731 9 is_stmt 0 view .LVU476
 1479 033c 3093 E800 		sts 232,r19
 1480               	.LBE119:
 1481               	.LBE120:
 996:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				return;
 1482               		.loc 1 996 18 is_stmt 1 view .LVU477
 1483 0340 8913      		cpse r24,r25
 1484 0342 00C0      		rjmp .L101
 996:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c **** 				return;
 1485               		.loc 1 996 18 is_stmt 0 discriminator 1 view .LVU478
 1486 0344 8032      		cpi r24,lo8(32)
 1487 0346 01F0      		breq .+2
 1488 0348 00C0      		rjmp .L57
 1489               	.L101:
 1490               	.LBB121:
 829:./tmk_keyboard/tmk_core/protocol/pjrc/usb.c ****                                 if (en) {
 1491               		.loc 1 829 10 discriminator 1 view .LVU479
 1492 034a 822F      		mov r24,r18
 1493 034c 00C0      		rjmp .L97
 1494               	.LBE121:
 1495               		.cfi_endproc
 1496               	.LFE12:
 1498               		.section	.bss.div4.0,"aw",@nobits
 1501               	div4.0:
 1502 0000 00        		.zero	1
 1503               		.section	.bss.usb_configuration,"aw",@nobits
 1506               	usb_configuration:
 1507 0000 00        		.zero	1
 1508               		.section	.progmem.data.descriptor_list,"a"
 1511               	descriptor_list:
 1512 0000 0001      		.word	256
 1513 0002 0000      		.word	0
 1514 0004 0000      		.word	device_descriptor
 1515 0006 12        		.byte	18
 1516 0007 0002      		.word	512
 1517 0009 0000      		.word	0
 1518 000b 0000      		.word	config1_descriptor
 1519 000d 54        		.byte	84
 1520 000e 0021      		.word	8448
 1521 0010 0000      		.word	0
 1522 0012 0000      		.word	config1_descriptor+18
 1523 0014 09        		.byte	9
 1524 0015 0022      		.word	8704
 1525 0017 0000      		.word	0
 1526 0019 0000      		.word	keyboard_hid_report_desc
 1527 001b 40        		.byte	64
 1528 001c 0021      		.word	8448
 1529 001e 0200      		.word	2
 1530 0020 0000      		.word	config1_descriptor+43
 1531 0022 09        		.byte	9
 1532 0023 0022      		.word	8704
 1533 0025 0200      		.word	2
 1534 0027 0000      		.word	debug_hid_report_desc
 1535 0029 15        		.byte	21
 1536 002a 0021      		.word	8448
 1537 002c 0300      		.word	3
 1538 002e 0000      		.word	config1_descriptor+68
 1539 0030 09        		.byte	9
 1540 0031 0022      		.word	8704
 1541 0033 0300      		.word	3
 1542 0035 0000      		.word	extra_hid_report_desc
 1543 0037 31        		.byte	49
 1544 0038 0003      		.word	768
 1545 003a 0000      		.word	0
 1546 003c 0000      		.word	string0
 1547 003e 04        		.byte	4
 1548 003f 0103      		.word	769
 1549 0041 0904      		.word	1033
 1550 0043 0000      		.word	string1
 1551 0045 0C        		.byte	12
 1552 0046 0203      		.word	770
 1553 0048 0904      		.word	1033
 1554 004a 0000      		.word	string2
 1555 004c 14        		.byte	20
 1556               		.section	.progmem.data.string2,"a"
 1559               	string2:
 1560 0000 14        		.byte	20
 1561 0001 03        		.byte	3
 1562 0002 2200      		.string	"\""
 1563 0004 4D00      		.string	"M"
 1564 0006 6F00      		.string	"o"
 1565 0008 6400      		.string	"d"
 1566 000a 6500      		.string	"e"
 1567 000c 6C00      		.string	"l"
 1568 000e 2000      		.string	" "
 1569 0010 4D00      		.string	"M"
 1570 0012 2200      		.string	"\""
 1571 0014 00        		.string	""
 1572 0015 00        		.string	""
 1573               		.section	.progmem.data.string1,"a"
 1576               	string1:
 1577 0000 0C        		.byte	12
 1578 0001 03        		.byte	3
 1579 0002 2200      		.string	"\""
 1580 0004 4900      		.string	"I"
 1581 0006 4200      		.string	"B"
 1582 0008 4D00      		.string	"M"
 1583 000a 2200      		.string	"\""
 1584 000c 00        		.string	""
 1585 000d 00        		.string	""
 1586               		.section	.progmem.data.string0,"a"
 1589               	string0:
 1590 0000 04        		.byte	4
 1591 0001 03        		.byte	3
 1592 0002 0904      		.word	1033
 1593               		.section	.progmem.data.config1_descriptor,"a"
 1596               	config1_descriptor:
 1597 0000 0902 5400 		.string	"\t\002T"
 1598 0004 0301 00   		.string	"\003\001"
 1599 0007 A032 0904 		.string	"\2402\t\004"
 1599      00
 1600 000c 00        		.string	""
 1601 000d 0103 0101 		.string	"\001\003\001\001"
 1601      00
 1602 0012 0921 1101 		.string	"\t!\021\001"
 1602      00
 1603 0017 0122 4000 		.string	"\001\"@"
 1604 001b 0705 8103 		.string	"\007\005\201\003\b"
 1604      0800 
 1605 0021 0A09 0402 		.string	"\n\t\004\002"
 1605      00
 1606 0026 0103 00   		.string	"\001\003"
 1607 0029 00        		.string	""
 1608 002a 00        		.string	""
 1609 002b 0921 1101 		.string	"\t!\021\001"
 1609      00
 1610 0030 0122 1500 		.string	"\001\"\025"
 1611 0034 0705 8303 		.string	"\007\005\203\003 "
 1611      2000 
 1612 003a 0109 0403 		.string	"\001\t\004\003"
 1612      00
 1613 003f 0103 00   		.string	"\001\003"
 1614 0042 00        		.string	""
 1615 0043 00        		.string	""
 1616 0044 0921 1101 		.string	"\t!\021\001"
 1616      00
 1617 0049 0122 3100 		.string	"\001\"1"
 1618 004d 0705 8403 		.string	"\007\005\204\003\b"
 1618      0800 
 1619 0053 0A        		.ascii	"\n"
 1620               		.section	.progmem.data.extra_hid_report_desc,"a"
 1623               	extra_hid_report_desc:
 1624 0000 0501 0980 		.string	"\005\001\t\200\241\001\205\002\025\001&\267"
 1624      A101 8502 
 1624      1501 26B7 
 1624      00
 1625 000d 1901 29B7 		.string	"\031\001)\267u\020\225\001\201"
 1625      7510 9501 
 1625      8100 
 1626 0017 C005 0C09 		.string	"\300\005\f\t\001\241\001\205\003\025\001&\234\002\031\001*\234\002u\020\225\001\201"
 1626      01A1 0185 
 1626      0315 0126 
 1626      9C02 1901 
 1626      2A9C 0275 
 1627 0030 C0        		.ascii	"\300"
 1628               		.section	.progmem.data.debug_hid_report_desc,"a"
 1631               	debug_hid_report_desc:
 1632 0000 0631 FF09 		.string	"\0061\377\tt\241Su\b\025"
 1632      74A1 5375 
 1632      0815 00
 1633 000b 26FF 00   		.string	"&\377"
 1634 000e 9520 0975 		.ascii	"\225 \tu\201\002\300"
 1634      8102 C0
 1635               		.section	.progmem.data.keyboard_hid_report_desc,"a"
 1638               	keyboard_hid_report_desc:
 1639 0000 0501 0906 		.string	"\005\001\t\006\241\001u\001\225\b\005\007\031\340)\347\025"
 1639      A101 7501 
 1639      9508 0507 
 1639      19E0 29E7 
 1639      1500 
 1640 0012 2501 8102 		.string	"%\001\201\002\225\001u\b\201\003\225\005u\001\005\b\031\001)\005\221\002\225\001u\003\221
 1640      9501 7508 
 1640      8103 9505 
 1640      7501 0508 
 1640      1901 2905 
 1641 0034 26FF 00   		.string	"&\377"
 1642 0037 0507 1900 		.string	"\005\007\031"
 1643 003b 29FF 8100 		.string	")\377\201"
 1644 003f C0        		.ascii	"\300"
 1645               		.section	.progmem.data.device_descriptor,"a"
 1648               	device_descriptor:
 1649 0000 1201 00   		.string	"\022\001"
 1650 0003 0200      		.string	"\002"
 1651 0005 00        		.string	""
 1652 0006 00        		.string	""
 1653 0007 20ED FE57 		.string	" \355\376W`\001"
 1653      6001 00
 1654 000e 0102 00   		.string	"\001\002"
 1655 0011 01        		.ascii	"\001"
 1656               		.section	.progmem.data.endpoint_config_table,"a"
 1659               	endpoint_config_table:
 1660 0000 01C1 0200 		.string	"\001\301\002"
 1661 0004 01C1 2601 		.string	"\001\301&\001\301\006"
 1661      C106 00
 1662 000b 00        		.string	""
 1663               	.global	suspend
 1664               		.section	.bss.suspend,"aw",@nobits
 1667               	suspend:
 1668 0000 00        		.zero	1
 1669               	.global	remote_wakeup
 1670               		.section	.bss.remote_wakeup,"aw",@nobits
 1673               	remote_wakeup:
 1674 0000 00        		.zero	1
 1675               		.text
 1676               	.Letext0:
 1677               		.file 2 "/usr/avr/include/stdint.h"
 1678               		.file 3 "./tmk_keyboard/tmk_core/protocol/pjrc/usb.h"
 1679               		.file 4 "./tmk_keyboard/tmk_core/common/report.h"
 1680               		.file 5 "./tmk_keyboard/tmk_core/common/host.h"
 1681               		.file 6 "./tmk_keyboard/tmk_core/protocol/pjrc/usb_keyboard.h"
 1682               		.file 7 "./tmk_keyboard/tmk_core/protocol/pjrc/usb_debug.h"
 1683               		.file 8 "./tmk_keyboard/tmk_core/common/action_util.h"
 1684               		.file 9 "./tmk_keyboard/tmk_core/common/action.h"
 1685               		.file 10 "./tmk_keyboard/tmk_core/common/suspend.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb.c
     /tmp/cckZBNvU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cckZBNvU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cckZBNvU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cckZBNvU.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cckZBNvU.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckZBNvU.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckZBNvU.s:13     .text.usb_wait_in_ready:0000000000000000 usb_wait_in_ready
     /tmp/cckZBNvU.s:38     .text.usb_init:0000000000000000 usb_init
     /tmp/cckZBNvU.s:1506   .bss.usb_configuration:0000000000000000 usb_configuration
     /tmp/cckZBNvU.s:1667   .bss.suspend:0000000000000000 suspend
     /tmp/cckZBNvU.s:92     .text.usb_configured:0000000000000000 usb_configured
     /tmp/cckZBNvU.s:123    .text.usb_remote_wakeup:0000000000000000 usb_remote_wakeup
     /tmp/cckZBNvU.s:151    .text.__vector_10:0000000000000000 __vector_10
     /tmp/cckZBNvU.s:1501   .bss.div4.0:0000000000000000 div4.0
     /tmp/cckZBNvU.s:435    .text.__vector_11:0000000000000000 __vector_11
     /tmp/cckZBNvU.s:1511   .progmem.data.descriptor_list:0000000000000000 descriptor_list
     /tmp/cckZBNvU.s:1659   .progmem.data.endpoint_config_table:0000000000000000 endpoint_config_table
     /tmp/cckZBNvU.s:1673   .bss.remote_wakeup:0000000000000000 remote_wakeup
     /tmp/cckZBNvU.s:1648   .progmem.data.device_descriptor:0000000000000000 device_descriptor
     /tmp/cckZBNvU.s:1596   .progmem.data.config1_descriptor:0000000000000000 config1_descriptor
     /tmp/cckZBNvU.s:1638   .progmem.data.keyboard_hid_report_desc:0000000000000000 keyboard_hid_report_desc
     /tmp/cckZBNvU.s:1631   .progmem.data.debug_hid_report_desc:0000000000000000 debug_hid_report_desc
     /tmp/cckZBNvU.s:1623   .progmem.data.extra_hid_report_desc:0000000000000000 extra_hid_report_desc
     /tmp/cckZBNvU.s:1589   .progmem.data.string0:0000000000000000 string0
     /tmp/cckZBNvU.s:1576   .progmem.data.string1:0000000000000000 string1
     /tmp/cckZBNvU.s:1559   .progmem.data.string2:0000000000000000 string2

UNDEFINED SYMBOLS
suspend_wakeup_init
debug_flush_timer
keyboard_idle
usb_keyboard_idle_count
keyboard_report
keyboard_protocol
usb_keyboard_leds
clear_keyboard
__do_clear_bss
